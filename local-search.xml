<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MacOS下禁用新版 Microsoft Edge 自动更新</title>
    <link href="/2022/08/07/2022-08-04-MacOS%E4%B8%8B%E7%A6%81%E7%94%A8%E6%96%B0%E7%89%88%20Microsoft%20Edge%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <url>/2022/08/07/2022-08-04-MacOS%E4%B8%8B%E7%A6%81%E7%94%A8%E6%96%B0%E7%89%88%20Microsoft%20Edge%20%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MacOS下禁用新版-Microsoft-Edge-自动更新"><a href="#MacOS下禁用新版-Microsoft-Edge-自动更新" class="headerlink" title="MacOS下禁用新版 Microsoft Edge 自动更新"></a>MacOS下禁用新版 Microsoft Edge 自动更新</h1><p>找到Edge的更新程序：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜ ls <span class="hljs-regexp">/Library/</span>Application\ Support<span class="hljs-regexp">/Microsoft/</span>MAU2.<span class="hljs-number">0</span>/<br>Microsoft AutoUpdate.app<br></code></pre></td></tr></table></figure><p>查看一下该文件的权限：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">➜ ls -al /Library/Application\ Support/Microsoft/MAU2.0/<br>total 0<br>drwxr-xr-x <span class="hljs-number"> 3 </span>root  wheel <span class="hljs-number"> 96 </span><span class="hljs-number"> 4 </span>15 20:05 .<br>drwxr-xr-x <span class="hljs-number"> 3 </span>root  wheel <span class="hljs-number"> 96 </span><span class="hljs-number"> 4 </span>15 20:05 ..<br>drwxrwxr-x <span class="hljs-number"> 3 </span>root  wheel <span class="hljs-number"> 96 </span><span class="hljs-number"> 4 </span>15 20:05 Microsoft AutoUpdate.app<br></code></pre></td></tr></table></figure><p>可以看到当前权限是 <code>775</code>。</p><p>修改其权限为 <code>644</code>，使其不能执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜ sudo chmod -R <span class="hljs-number">644</span> <span class="hljs-regexp">/Library/</span>Application\ Support<span class="hljs-regexp">/Microsoft/</span>MAU2.<span class="hljs-number">0</span>/Microsoft\ AutoUpdate.app<br>Password:<br></code></pre></td></tr></table></figure><p>后期如果想要改回来以保持Edge的最新版本的话，只需要执行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> chmod -R <span class="hljs-number">775</span> /Library/Application\ Support/Microsoft/MAU2.<span class="hljs-number">0</span>/Microsoft\ AutoUpdate.app <br></code></pre></td></tr></table></figure><p>让其恢复可执行权限即可。</p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
      <category>Edge</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Edge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装软件时提示“文件已损坏，您应该将它移到废纸篓</title>
    <link href="/2022/08/07/2022-08-05-Mac%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8F%90%E7%A4%BA%E2%80%9C%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93%E2%80%9D/"/>
    <url>/2022/08/07/2022-08-05-Mac%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E6%97%B6%E6%8F%90%E7%A4%BA%E2%80%9C%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac安装软件时提示“文件已损坏，您应该将它移到废纸篓"><a href="#Mac安装软件时提示“文件已损坏，您应该将它移到废纸篓" class="headerlink" title="Mac安装软件时提示“文件已损坏，您应该将它移到废纸篓"></a>Mac安装软件时提示“文件已损坏，您应该将它移到废纸篓</h1><p>1.在终端控制台中输入：sudo spctl –master-disable，回车,如果你的笔记本设置有开机密码，会提示要你输入密码，输入的整个过程中是看不到密码显示的，不要因为看不到输入的密码而着急，继续输入完密码后按下回车键。</p><p>2.打开系统偏好设置——&gt;安全性与隐私，显示了任何来源，然后点击允许来自任何来源。如果没有【任何来源】的选项，可以再次执行刚才的代码进行尝试。</p><p>3.重新双击安装文件便不会再次提示“文件已损坏”了。</p><p>4.打开终端，输入： sudo xattr -r -d com.apple.quarantine，最后面加上一个空格</p><p>5.然后在访达-&gt;应用程序中找到你要打开的软件，拖到终端窗口中，回车执行，就可以正常打开文件</p><p>如果还不行，终端继续输入以下命令<br>sudo codesign –force –deep –sign -<br>然后输入个空格，再将打开失败的程序拖拽到终端窗口中，此时会自动填充路径 sudo codesign –force –deep –sign - &#x2F;Applications&#x2F;name.app （&#x2F;Applications前面有一个空格）</p>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew安装Minikube指南</title>
    <link href="/2022/08/07/2022-08-07-Homebrew%E5%AE%89%E8%A3%85Minikube%E6%8C%87%E5%8D%97/"/>
    <url>/2022/08/07/2022-08-07-Homebrew%E5%AE%89%E8%A3%85Minikube%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="1-安装Homebrew"><a href="#1-安装Homebrew" class="headerlink" title="1. 安装Homebrew"></a>1. 安装Homebrew</h3><p><strong>由于国内网络环境问题，Homebrew官方脚本可能会安装失败，可采用以下国内源安装使用</strong></p><h4 id="1-苹果电脑标准安装脚本：（推荐-优点全面-缺点慢一点）"><a href="#1-苹果电脑标准安装脚本：（推荐-优点全面-缺点慢一点）" class="headerlink" title="(1) 苹果电脑标准安装脚本：（推荐 优点全面 缺点慢一点）"></a>(1) 苹果电脑标准安装脚本：（推荐 优点全面 缺点慢一点）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-苹果电脑极速安装脚本：（优点安装速度快-缺点update功能需要命令修复）"><a href="#2-苹果电脑极速安装脚本：（优点安装速度快-缺点update功能需要命令修复）" class="headerlink" title="(2) 苹果电脑极速安装脚本：（优点安装速度快 缺点update功能需要命令修复）"></a>(2) 苹果电脑极速安装脚本：（优点安装速度快 缺点update功能需要命令修复）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span> speed<br></code></pre></td></tr></table></figure><h4 id="3-Linux-标准安装脚本："><a href="#3-Linux-标准安装脚本：" class="headerlink" title="(3) Linux 标准安装脚本："></a>(3) Linux 标准安装脚本：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> Homebrew.sh ; <span class="hljs-attribute">wget</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh ; <span class="hljs-attribute">bash</span> Homebrew.sh<br></code></pre></td></tr></table></figure><h4 id="4-苹果电脑卸载脚本："><a href="#4-苹果电脑卸载脚本：" class="headerlink" title="(4)苹果电脑卸载脚本："></a>(4)苹果电脑卸载脚本：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-Linux卸载脚本："><a href="#5-Linux卸载脚本：" class="headerlink" title="(5)Linux卸载脚本："></a>(5)Linux卸载脚本：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> HomebrewUninstall.sh ; <span class="hljs-attribute">wget</span> https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh ; <span class="hljs-attribute">bash</span> HomebrewUninstall.sh<br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/cunkai/HomebrewCN.git">详细使用可点击查看</a></p><h3 id="2-安装minikube"><a href="#2-安装minikube" class="headerlink" title="2. 安装minikube"></a>2. 安装minikube</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>minikube<br></code></pre></td></tr></table></figure><h3 id="3-启动minikube"><a href="#3-启动minikube" class="headerlink" title="3. 启动minikube"></a>3. 启动minikube</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">minikube start <span class="hljs-attribute">--driver</span>=docker <span class="hljs-attribute">--kubernetes-version</span>=1.22.1 <span class="hljs-attribute">--image-repository</span>=<span class="hljs-string">&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27;</span><br></code></pre></td></tr></table></figure><p>启动成功后，如下图所示</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081219515.png" alt="启动成功截图"></p><ul><li><p>–-driver 指定驱动为docker，同时也支持VirtualBox、SSH等，具体配置信息可参考<a href="https://minikube.sigs.k8s.io/docs/drivers/">minikube官网</a></p></li><li><p>–kubernetes-version 指定kubernetes的版本号</p></li><li><p>–image-repository 配置镜像源，由于网络问题，可以配置阿里云镜像</p></li></ul><h3 id="4-操作集群"><a href="#4-操作集群" class="headerlink" title="4. 操作集群"></a>4. 操作集群</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> nodes<br>kubectl <span class="hljs-built_in">get</span> pods -A<br></code></pre></td></tr></table></figure><p>还可以通过将以下内容添加到shell配置中来使用</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">alias kubectl<span class="hljs-operator">=</span><span class="hljs-string">&quot;minikube kubectl --&quot;</span><br></code></pre></td></tr></table></figure><p>最初，某些服务（例如 storage-provisioner）可能尚未处于运行状态。这是集群启动期间的正常情况，并且会立即自行解决。为了进一步了解集群状态，minikube 捆绑了 Kubernetes Dashboard：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">minikube dashboard</span><br></code></pre></td></tr></table></figure><h3 id="5-管理集群"><a href="#5-管理集群" class="headerlink" title="5. 管理集群"></a>5. 管理集群</h3><p>在不影响已部署应用程序的情况下暂停 Kubernetes：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">minikube <span class="hljs-keyword">pause</span><br></code></pre></td></tr></table></figure><p>取消暂停暂停的实例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">minikube unpause</span><br></code></pre></td></tr></table></figure><p>停止集群：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">minikube stop<br></code></pre></td></tr></table></figure><p>增加默认内存限制（需要重新启动）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">minikube<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> memory 16384<br></code></pre></td></tr></table></figure><p>浏览易于安装的 Kubernetes 服务目录：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">minikube addons list</span><br></code></pre></td></tr></table></figure><p>创建第二个运行旧 Kubernetes 版本的集群：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">minikube</span> start -p aged --kubernetes-version=v1.<span class="hljs-number">16</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>删除所有 minikube 集群：</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">minikube <span class="hljs-keyword">delete</span> --<span class="hljs-symbol">all</span><br></code></pre></td></tr></table></figure><h3 id="6-完全卸载minikube"><a href="#6-完全卸载minikube" class="headerlink" title="6. 完全卸载minikube"></a>6. 完全卸载minikube</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">minikube <span class="hljs-keyword">stop</span><br>minikube <span class="hljs-keyword">delete</span> <span class="hljs-variable">&amp;&amp;</span><br>docker <span class="hljs-keyword">stop</span> $(docker ps -aq) <span class="hljs-variable">&amp;&amp;</span><br>rm -rf ~/.kube ~/.minikube <span class="hljs-variable">&amp;&amp;</span><br>sudo rm -rf /usr/local/bin/localkube /usr/local/bin/minikube <span class="hljs-variable">&amp;&amp;</span><br>launchctl <span class="hljs-keyword">stop</span> <span class="hljs-string">&#x27;*kubelet*.mount&#x27;</span> <span class="hljs-variable">&amp;&amp;</span><br>launchctl <span class="hljs-keyword">stop</span> localkube.service <span class="hljs-variable">&amp;&amp;</span><br>launchctl disable localkube.service <span class="hljs-variable">&amp;&amp;</span><br>sudo rm -rf /etc/kubernetes/ <span class="hljs-variable">&amp;&amp;</span><br>docker system prune -af --volumes<br>brew uninstall minikube<br></code></pre></td></tr></table></figure><p><strong>各位看官老爷觉得对自己有帮助，麻烦三连走起哦，如有错误之处欢迎各位指正!</strong></p>]]></content>
    
    
    <categories>
      
      <category>Homebrew</category>
      
      <category>Minikube</category>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Homebrew</tag>
      
      <tag>Minikube</tag>
      
      <tag>Kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac没有ll命令解决方案</title>
    <link href="/2022/08/07/2022-08-07-mac%E6%B2%A1%E6%9C%89ll%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/08/07/2022-08-07-mac%E6%B2%A1%E6%9C%89ll%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="mac没有ll命令解决方案"><a href="#mac没有ll命令解决方案" class="headerlink" title="mac没有ll命令解决方案"></a>mac没有ll命令解决方案</h1><h3 id="1-编辑-bash-profile文件"><a href="#1-编辑-bash-profile文件" class="headerlink" title="1. 编辑.bash_profile文件"></a>1. 编辑.bash_profile文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="2-在bash-profile中添加："><a href="#2-在bash-profile中添加：" class="headerlink" title="2. 在bash_profile中添加："></a>2. 在bash_profile中添加：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> ll=<span class="hljs-string">&#x27;ls -alF&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="3-最后让修改立即生效"><a href="#3-最后让修改立即生效" class="headerlink" title="3. 最后让修改立即生效"></a>3. 最后让修改立即生效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="4-根目录下创建-zshrc-文件"><a href="#4-根目录下创建-zshrc-文件" class="headerlink" title="4. 根目录下创建.zshrc 文件"></a>4. 根目录下创建.zshrc 文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> .zshrc<br></code></pre></td></tr></table></figure><h3 id="5-zshrc文件-新增内容："><a href="#5-zshrc文件-新增内容：" class="headerlink" title="5. .zshrc文件 新增内容："></a>5. .zshrc文件 新增内容：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><h3 id="6-退出文件，同级目录下重新执行："><a href="#6-退出文件，同级目录下重新执行：" class="headerlink" title="6. 退出文件，同级目录下重新执行："></a>6. 退出文件，同级目录下重新执行：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装完Mysql命令不可用</title>
    <link href="/2022/08/01/2022-08-01-Mac%E5%AE%89%E8%A3%85%E5%AE%8CMysql%E5%91%BD%E4%BB%A4%E4%B8%8D%E5%8F%AF%E7%94%A8/"/>
    <url>/2022/08/01/2022-08-01-Mac%E5%AE%89%E8%A3%85%E5%AE%8CMysql%E5%91%BD%E4%BB%A4%E4%B8%8D%E5%8F%AF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>1.在.zshrc以及.bash_profile文件下添加如下内容</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">export <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$&#123;</span><span class="hljs-title class_">PATH</span>&#125;<span class="hljs-symbol">:/usr/local/mysql/bin</span><br></code></pre></td></tr></table></figure><p>2.分别执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch的安装与简单配置</title>
    <link href="/2022/02/01/2021-02-01-ElasticSearch%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/02/01/2021-02-01-ElasticSearch%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>一、启动单节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch -E node.name=node0 -E cluster.name=elastic -E path.data=node0_data<br></code></pre></td></tr></table></figure><p>二、安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch-plugin install analysis-icu<br></code></pre></td></tr></table></figure><p>三、 查看插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch-plugin install analysis-icu<br></code></pre></td></tr></table></figure><p>四、查看安装的插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET http://localhost:9200/_cat/plugins?v<br></code></pre></td></tr></table></figure><p>五、启动多节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bin/elasticsearch -E node.name=node0 -E cluster.name=elastic -E path.data=node0_data<br>bin/elasticsearch -E node.name=node1 -E cluster.name=elastic -E path.data=node1_data<br>bin/elasticsearch -E node.name=node2 -E cluster.name=elastic -E path.data=node2_data<br>bin/elasticsearch -E node.name=node3 -E cluster.name=elastic -E path.data=node3_data<br></code></pre></td></tr></table></figure><p>六、查看集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET http://localhost:9200<br></code></pre></td></tr></table></figure><p>七、查看nodes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">GET _cat/nodes<br>GET _cluster/health<br></code></pre></td></tr></table></figure><p>八、添加访问密码</p><ol><li><p>编辑elasticsearch.yml</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">network<span class="hljs-selector-class">.host</span>: <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br>http<span class="hljs-selector-class">.port</span>: <span class="hljs-number">9200</span><br>discovery<span class="hljs-selector-class">.seed_hosts</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;0.0.0.0&quot;</span>]</span><br>cluster<span class="hljs-selector-class">.initial_master_nodes</span>: <span class="hljs-selector-attr">[<span class="hljs-string">&quot;node-1&quot;</span>]</span><br><br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.enabled</span>: true<br>xpack<span class="hljs-selector-class">.license</span><span class="hljs-selector-class">.self_generated</span><span class="hljs-selector-class">.type</span>: basic<br>xpack<span class="hljs-selector-class">.security</span><span class="hljs-selector-class">.transport</span><span class="hljs-selector-class">.ssl</span><span class="hljs-selector-class">.enabled</span>: true<br></code></pre></td></tr></table></figure></li><li><p>设置es密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./elasticsearch-setup-passwords interactive<br></code></pre></td></tr></table></figure><p>按照提示设置密码即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 配置大全</title>
    <link href="/2022/01/02/2022-01-02-Nginx%20%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/"/>
    <url>/2022/01/02/2022-01-02-Nginx%20%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><p>Nginx的稳定性、功能集、示例配置文件和低系统资源的消耗让他后来居上，在全球活跃的网站中有12.18%的使用比率，大约为2220万个网站。</p><hr><h2 id="Nginx常用功能"><a href="#Nginx常用功能" class="headerlink" title="Nginx常用功能"></a>Nginx常用功能</h2><p>1、Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</p><p>Nginx在做反向代理时，提供性能稳定，并且能够提供配置灵活的转发功能。Nginx可以根据不同的正则匹配，采取不同的转发策略，比如图片文件结尾的走文件服务器，动态页面走web服务器，只要你正则写的没问题，又有相对应的服务器解决方案，你就可以随心所欲的玩。并且Nginx对返回结果进行错误页跳转，异常判断等。如果被分发的服务器存在异常，他可以将请求重新转发给另外一台服务器，然后自动去除异常服务器。</p><hr><h2 id="2、负载均衡"><a href="#2、负载均衡" class="headerlink" title="2、负载均衡"></a>2、负载均衡</h2><p>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Ip hash。扩展策略，就天马行空，只有你想不到的没有他做不到的啦，你可以参照所有的负载均衡算法，给他一一找出来做下实现。</p><p>Ip hash算法，对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</p><hr><h2 id="3、web缓存"><a href="#3、web缓存" class="headerlink" title="3、web缓存"></a>3、web缓存</h2><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><hr><h2 id="4、Nginx相关地址"><a href="#4、Nginx相关地址" class="headerlink" title="4、Nginx相关地址"></a>4、Nginx相关地址</h2><p>源码：<a href="https://trac.nginx.org/nginx/browser">https://trac.nginx.org/nginx/browser</a></p><p>官网：<a href="http://www.nginx.org/">http://www.nginx.org/</a></p><hr><h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><p>如果你下载好啦，你的安装文件，不妨打开conf文件夹的nginx.conf文件，Nginx服务器的基础配置，默认的配置也存放在此。</p><p>在 nginx.conf 的注释符号为： <strong>#</strong></p><p>默认的 nginx 配置文件 nginx.conf 内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-attribute">worker_processes</span>  <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br>    <span class="hljs-comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br><br>        <span class="hljs-comment">#charset koi8-r;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br><br>        <span class="hljs-comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ .php$ &#123;</span><br>        <span class="hljs-comment">#    proxy_pass   http://127.0.0.1;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ .php$ &#123;</span><br>        <span class="hljs-comment">#    root           html;</span><br>        <span class="hljs-comment">#    fastcgi_pass   127.0.0.1:9000;</span><br>        <span class="hljs-comment">#    fastcgi_index  index.php;</span><br>        <span class="hljs-comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br>        <span class="hljs-comment">#    include        fastcgi_params;</span><br>        <span class="hljs-comment">#&#125;</span><br><br>        <span class="hljs-comment"># deny access to .htaccess files, if Apache&#x27;s document root</span><br>        <span class="hljs-comment"># concurs with nginx&#x27;s one</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-comment">#location ~ /.ht &#123;</span><br>        <span class="hljs-comment">#    deny  all;</span><br>        <span class="hljs-comment">#&#125;</span><br>    &#125;<br><br><br>    <span class="hljs-comment"># another virtual host using mix of IP-, name-, and port-based configuration</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       8000;</span><br>    <span class="hljs-comment">#    listen       somename:8080;</span><br>    <span class="hljs-comment">#    server_name  somename  alias  another.alias;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br><br>    <span class="hljs-comment"># HTTPS server</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#server &#123;</span><br>    <span class="hljs-comment">#    listen       443 ssl;</span><br>    <span class="hljs-comment">#    server_name  localhost;</span><br><br>    <span class="hljs-comment">#    ssl_certificate      cert.pem;</span><br>    <span class="hljs-comment">#    ssl_certificate_key  cert.key;</span><br><br>    <span class="hljs-comment">#    ssl_session_cache    shared:SSL:1m;</span><br>    <span class="hljs-comment">#    ssl_session_timeout  5m;</span><br><br>    <span class="hljs-comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br>    <span class="hljs-comment">#    ssl_prefer_server_ciphers  on;</span><br><br>    <span class="hljs-comment">#    location / &#123;</span><br>    <span class="hljs-comment">#        root   html;</span><br>    <span class="hljs-comment">#        index  index.html index.htm;</span><br>    <span class="hljs-comment">#    &#125;</span><br>    <span class="hljs-comment">#&#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>nginx 文件结构</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">...</span>              <span class="hljs-comment">#全局块</span><br><br>events &#123;         <span class="hljs-comment">#events块</span><br>   <span class="hljs-string">...</span><br>&#125;<br><br>http      <span class="hljs-comment">#http块</span><br>&#123;<br>    <span class="hljs-string">...</span>   <span class="hljs-comment">#http全局块</span><br>    server        <span class="hljs-comment">#server块</span><br>    &#123; <br>        <span class="hljs-string">...</span>       <span class="hljs-comment">#server全局块</span><br>        location [PATTERN]   <span class="hljs-comment">#location块</span><br>        &#123;<br>            <span class="hljs-string">...</span><br>        &#125;<br>        location [PATTERN] <br>        &#123;<br>            <span class="hljs-string">...</span><br>        &#125;<br>    &#125;<br>    server<br>    &#123;<br>      <span class="hljs-string">...</span><br>    &#125;<br>    <span class="hljs-string">...</span>     <span class="hljs-comment">#http全局块</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>1、<strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>2、<strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>3、<strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>4、<strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>5、<strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li></ul><p>下面给大家上一个配置文件，作为理解。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">########### 每个指令必须有分号结束。#################</span><br><span class="hljs-comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="hljs-comment">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="hljs-comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="hljs-attribute">error_log</span> log/<span class="hljs-literal">error</span>.log <span class="hljs-literal">debug</span>;  <span class="hljs-comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">accept_mutex</span> <span class="hljs-literal">on</span>;   <span class="hljs-comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span><br>    <span class="hljs-attribute">multi_accept</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment">#设置一个进程是否同时接受多个网络连接，默认为off</span><br>    <span class="hljs-comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;    <span class="hljs-comment">#最大连接数，默认为512</span><br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;   <span class="hljs-comment">#文件扩展名与文件类型映射表</span><br>    <span class="hljs-attribute">default_type</span>  application/octet-stream; <span class="hljs-comment">#默认文件类型，默认为text/plain</span><br>    <span class="hljs-comment">#access_log off; #取消服务日志    </span><br>    <span class="hljs-attribute">log_format</span> myFormat <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span>–<span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-variable">$request</span> <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-variable">$http_referer</span> <span class="hljs-variable">$http_user_agent</span> <span class="hljs-variable">$http_x_forwarded_for</span>&#x27;</span>; <span class="hljs-comment">#自定义格式</span><br>    <span class="hljs-attribute">access_log</span> log/access.log myFormat;  <span class="hljs-comment">#combined为日志格式的默认值</span><br>    <span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;   <span class="hljs-comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br>    <span class="hljs-attribute">sendfile_max_chunk</span> <span class="hljs-number">100k</span>;  <span class="hljs-comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br>    <span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">65</span>;  <span class="hljs-comment">#连接超时时间，默认为75s，可以在http，server，location块。</span><br><br>    <span class="hljs-section">upstream</span> mysvr &#123;   <br>      <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:7878</span>;<br>      <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.10.121:3333</span> backup;  <span class="hljs-comment">#热备</span><br>    &#125;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> https://www.baidu.com; <span class="hljs-comment">#错误页</span><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">keepalive_requests</span> <span class="hljs-number">120</span>; <span class="hljs-comment">#单连接请求上限次数。</span><br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">4545</span>;   <span class="hljs-comment">#监听端口</span><br>        <span class="hljs-attribute">server_name</span>  <span class="hljs-number">127.0.0.1</span>;   <span class="hljs-comment">#监听地址       </span><br>        <span class="hljs-section">location</span>  ~*^.+$ &#123;       <span class="hljs-comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br>           <span class="hljs-comment">#root path;  #根目录</span><br>           <span class="hljs-comment">#index vv.txt;  #设置默认页</span><br>           <span class="hljs-attribute">proxy_pass</span>  http://mysvr;  <span class="hljs-comment">#请求转向mysvr 定义的服务器列表</span><br>           <span class="hljs-attribute">deny</span> <span class="hljs-number">127.0.0.1</span>;  <span class="hljs-comment">#拒绝的ip</span><br>           <span class="hljs-attribute">allow</span> <span class="hljs-number">172.18.5.54</span>; <span class="hljs-comment">#允许的ip           </span><br>        &#125; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面是nginx的基本配置，需要注意的有以下几点：</p><p>1、几个常见配置项：</p><ul><li>1.$http_x_forwarded_for 用以记录客户端的ip地址；</li><li>2.$remote_user ：用来记录客户端用户名称；</li><li>3.$time_local ： 用来记录访问时间与时区；</li><li>4.$request ： 用来记录请求的url与http协议；</li><li>5.$status ： 用来记录请求状态；成功是200；</li><li>6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li><li>7.$http_referer ：用来记录从那个页面链接访问过来的；</li><li>8.$http_user_agent ：记录客户端浏览器的相关信息；</li></ul><p>2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。</p><p>3、每个指令必须有分号结束。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试题汇总</title>
    <link href="/2022/01/01/2022-01-01-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2022/01/01/2022-01-01-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><h5 id="1-ArrayList和LinkedList的区别"><a href="#1-ArrayList和LinkedList的区别" class="headerlink" title="1. ArrayList和LinkedList的区别"></a>1. ArrayList和LinkedList的区别</h5><p>Array(数组)是基于索引(index)的数据结构，它使用索引在数组中搜索和读取数据是很快的。<br>Array获取数据的时间复杂度是O(1),但是要删除数据却是开销很大，因为这需要重排数组中的所有数据。<br>缺点: 数组初始化必须指定初始化的长度, 否则报错。<br>List—是一个有序的集合，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。List有两个重要的实现类:ArrayList和LinkedList<br>ArrayList: 可以看作是能够自动增长容量的数组<br>ArrayList的toArray方法返回一个数组<br>ArrayList的asList方法返回一个列表<br>ArrayList底层的实现是Array, 数组扩容实现， LinkList是一个双链表,在添加和删除元素时具有比ArrayList更好的性能.但在get与set方面弱于 ArrayList.当然,这些对比都是指数据量很大或者操作很频繁。</p><h5 id="2-HashMap和HashTable的区别"><a href="#2-HashMap和HashTable的区别" class="headerlink" title="2. HashMap和HashTable的区别"></a>2. HashMap和HashTable的区别</h5><p><strong>父类不同</strong><br>HashMap是继承自AbstractMap类，而Hashtable是继承自Dictionary类。不过它们都同时实现 了map、Cloneable(可复制)、Serializable(可序列化)这三个接口。<br><strong>对外提供的接口不同</strong><br>Hashtable比HashMap多提供了elments() 和contains() 两个方法。<br>elements() 方法继承自Hashtable的父类Dictionnary。elements() 方法用于返回此Hashtable中的 value的枚举。contains()方法判断该Hashtable是否包含传入的value。它的作用与containsValue()一致。事实上， contansValue() 就只是调用了一下contains() 方法。<br><strong>对null支持不同</strong><br>Hashtable:key和value都不能为null。<br>HashMap:key可以为null，但是这样的key只能有一个，因为必须保证key的唯一性;可以有多个key 值对应的value为null。<br><strong>安全性不同</strong><br>HashMap是线程不安全的，在多线程并发的环境下，可能会产生死锁等问题，因此需要开发人员自己 处理多线程的安全问题。<br>Hashtable是线程安全的，它的每个方法上都有synchronized 关键字，因此可直接用于多线程中。 虽然HashMap是线程不安全的，但是它的效率远远高于Hashtable，这样设计是合理的，因为大部分的 使用场景都是单线程。当需要多线程操作的时候可以使用线程安全的ConcurrentHashMap。 ConcurrentHashMap虽然也是线程安全的，但是它的效率比Hashtable要高好多倍。因为 ConcurrentHashMap使用了分段锁，并不对整个数据进行锁定。<br><strong>初始容量大小和每次扩充容量大小不同</strong><br><strong>计算hash值的方法不同</strong></p><h5 id="3-List-Set-Map三者的区别"><a href="#3-List-Set-Map三者的区别" class="headerlink" title="3.  List,Set,Map三者的区别"></a>3.  List,Set,Map三者的区别</h5><p><strong>List</strong>(对付顺序的好帮手): List接口存储一组不唯一(可以有多个元素引用相同的对象)，有序的对象。<br><strong>Set</strong>(注重独一无二的性质):不允许重复的集合。不会有多个元素引用相同的对象。<br><strong>Map</strong>(用Key来搜索的专): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</p><h5 id="4-是否可以继承-String-类"><a href="#4-是否可以继承-String-类" class="headerlink" title="4. 是否可以继承 String 类?"></a>4. 是否可以继承 String 类?</h5><p>String 类是 final 类，不可以被继承，继承 String 本身就是一个错误的行为，对 String 类型最好的重用方式是关联关系(Has-A)和依赖关系(Use-A)而不是继承关系(Is-A)。</p><h5 id="5-和Equals区别"><a href="#5-和Equals区别" class="headerlink" title="5. &#x3D;&#x3D;和Equals区别"></a>5. &#x3D;&#x3D;和Equals区别</h5><p><strong>&#x3D;&#x3D;</strong><br>如果比较的是基本数据类型，那么比较的是变量的值<br>如果比较的是引用数据类型，那么比较的是地址值（两个对象是否指向同一块内存）</p><p><strong>equals</strong><br>如果没重写equals方法比较的是两个对象的地址值<br>如果重写了equals方法后我们往往比较的是对象中的属性的内容<br>equals()方法最初在Object类中定义的，默认的实现就是使用&#x3D;&#x3D;</p><h5 id="6-String、StringBuffer、StringBuilder"><a href="#6-String、StringBuffer、StringBuilder" class="headerlink" title="6. String、StringBuffer、StringBuilder"></a>6. String、StringBuffer、StringBuilder</h5><p>String是final修饰的，不可变，每次操作都会产生新的String对象<br>StringBuffer和StringBuilder都是在原对象上操作<br>StringBuffer是线程安全的，StringBuilder线程不安全的<br>StringBuffer方法都是synchronized修饰的<br><strong>性能:</strong> StringBuilder &gt; StringBuffer &gt; String<br><strong>场景:</strong> 经常需要改变字符串内容时优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</p><h5 id="7-重载和重写的区别"><a href="#7-重载和重写的区别" class="headerlink" title="7. 重载和重写的区别"></a>7. 重载和重写的区别</h5><p><strong>重载:</strong>  发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。<br><strong>重写:</strong>   发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。</p><h5 id="8-BIO、NIO、AIO的区别"><a href="#8-BIO、NIO、AIO的区别" class="headerlink" title="8. BIO、NIO、AIO的区别"></a>8. BIO、NIO、AIO的区别</h5><p><strong>BIO (同步阻塞I&#x2F;O模式)</strong></p><p>数据的读取写入必须阻塞在一个线程内等待其完成。<br>这里使用那个经典的烧开水例子，这里假设一个烧开水的场景，有一排水壶在烧开水，BIO的工作模式就是， 叫一个线程停留在一个水壶那，直到这个水壶烧开，才去处理下一个水壶。但是实际上线程在等待水壶烧开的时间段什么都没有做。</p><p><strong>NIO（同步非阻塞）</strong><br>同时支持阻塞与非阻塞模式，但这里我们以其同步非阻塞I&#x2F;O模式来说明，那么什么叫做同步非阻塞？如果还拿烧开水来说，NIO的做法是叫一个线程不断的轮询每个水壶的状态，看看是否有水壶的状态发生了改变，从而进行下一步的操作。</p><p><strong>AIO （异步非阻塞I&#x2F;O模型）</strong><br>异步非阻塞与同步非阻塞的区别在哪里？异步非阻塞无需一个线程去轮询所有IO操作的状态改变，在相应的状态改变后，系统会通知对应的线程来处理。对应到烧开水中就是，为每个水壶上面装了一个开关，水烧开之后，水壶会自动通知我水烧开了。</p><table><thead><tr><th>IO</th><th>NIO</th></tr></thead><tbody><tr><td>面向流(Stream Oriented)</td><td>面向缓冲区(Buffer Oriented)</td></tr><tr><td>阻塞IO(Blocking IO)</td><td>非阻塞IO(Non Blocking IO)</td></tr><tr><td>无</td><td>选择器(Selectors)</td></tr></tbody></table><h5 id="9-常用io类有那些"><a href="#9-常用io类有那些" class="headerlink" title="9. 常用io类有那些"></a>9. 常用io类有那些</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">File<br>FileInputSteam，FileOutputStream <br>BufferInputStream，BufferedOutputSream <br>PrintWrite<br>FileReader，FileWriter<br>BufferReader，BufferedWriter <br>ObjectInputStream，ObjectOutputSream<br></code></pre></td></tr></table></figure><h5 id="10-HashMap（数组-链表-红黑树）"><a href="#10-HashMap（数组-链表-红黑树）" class="headerlink" title="10. HashMap（数组+链表+红黑树）"></a>10. HashMap（数组+链表+红黑树）</h5><p>HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快<br>的访问速度，但遍历顺序却是不确定的。 HashMap 最多只允许一条记录的键为 null，允许多条记<br>录的值为 null。 HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导<br>致数据的不一致。如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使<br>HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。大方向上， HashMap 里面是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色<br>的实体是嵌套类 Entry 的实例， Entry 包含四个属性： key, value, hash 值和用于单向链表的 next。</p><ul><li><p>capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</p></li><li><p>loadFactor：负载因子，默认为 0.75。</p></li><li><p>threshold：扩容的阈值，等于 capacity * loadFactor。<br>Java8 对 HashMap 进行了一些修改，  最大的不同就是利用了红黑树，所以其由  数组+链表+红黑<br>树组成。<br>根据 Java7 HashMap 的介绍，我们知道，查找的时候，根据 hash 值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决 于链表的长度，为 O(n)。为了降低这部分的开销，在 Java8 中，当链表中的元素超过了 8 个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。<br/></p><h6 id="1-JDK8对hash函数做了优化，JDK8还有别的优化吗？讲讲为什么要做这几点优化？"><a href="#1-JDK8对hash函数做了优化，JDK8还有别的优化吗？讲讲为什么要做这几点优化？" class="headerlink" title="(1)JDK8对hash函数做了优化，JDK8还有别的优化吗？讲讲为什么要做这几点优化？"></a>(1)JDK8对hash函数做了优化，JDK8还有别的优化吗？讲讲为什么要做这几点优化？<br/></h6></li><li><p>数组+链表改成了数组+链表或红黑树;<br/></p></li><li><p>链表的插入方式从头插法改成了尾插法，简单说就是插入时，如果数组位置上已经有元素，1.7将新元素放到数组中，原始节点作为新节点的 后继节点，1.8遍历链表，将元素放置到链表的最后;<br/></p></li><li><p>扩容的时候1.7需要对原数组中的元素进行重新hash定位在新数组的位置，1.8采用更简单的判断逻辑，位置不变或索引+旧容量大小;</p></li><li><p>在插入时，1.7先判断是否需要扩容，再插入，1.8先进行插入，插入完成再判断是否需要扩容;<br/><br><strong>原因：</strong><br/></p></li><li><p>防止发生hash冲突，链表长度过长，将时间复杂度由O(n)降为O(logn);<br/></p></li><li><p>因为1.7头插法扩容时，头插法会使链表发生反转，多线程环境下会产生环；<br/></p></li><li><p>A线程在插入节点B，B线程也在插入，遇到容量不够开始扩容，重新hash，放置元素，采用头插法，后遍历到的B节点放入了头部，这样形成了环。<br/></p></li><li><p>扩容的时候为什么1.8不用重新hash就可以直接定位原节点在新数据的位置呢?<br/></p><ul><li>这是由于扩容是扩大为原数组大小的2倍，用于计算数组位置的掩码仅仅只是高位多了一个1，怎么理解呢？扩容前长度为16，用于计算(n-1) &amp; hash 的二进制n-1为0000 1111，扩容为32后的二进制就高位多了1，为0001 1111。</li></ul></li></ul><h5 id="11-说说ConcurrentHashMap"><a href="#11-说说ConcurrentHashMap" class="headerlink" title="11. 说说ConcurrentHashMap"></a>11. 说说ConcurrentHashMap</h5><p><strong>Segment段</strong><br>ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一<br>些。整个 ConcurrentHashMap 由一个个 Segment 组成， Segment 代表”部分“或”一段“的<br>意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个<br>segment。<br><strong>线程安全（Segment 继承 ReentrantLock 加锁）</strong><br>简单理解就是， ConcurrentHashMap 是一个 Segment 数组， Segment 通过继承ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全<br><strong>并行度（默认 16）</strong><br>concurrencyLevel：并行级别、并发数、 Segment 数，怎么翻译不重要，理解它。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上， 这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时候设置为其他值，但是一旦初始化以后，它是不可以扩容的。再具体到每个 Segment 内部，其实每个 Segment 很像之前介绍的 HashMap，不过它要保证线程安全，所以处理起来要麻烦些。<br><strong>Java8 实现(引入了红黑树)</strong><br>Java8 对 ConcurrentHashMap 进行了比较大的改动,Java8 也引入了红黑树。</p><h5 id="12-try-catch-ﬁnally，try里有return，ﬁnally还执行么？"><a href="#12-try-catch-ﬁnally，try里有return，ﬁnally还执行么？" class="headerlink" title="12. try catch ﬁnally，try里有return，ﬁnally还执行么？"></a>12. try catch ﬁnally，try里有return，ﬁnally还执行么？</h5><p>执行，并且ﬁnally的执行早于try里面的return结论：</p><ul><li>不管有木有出现异常，ﬁnally块中代码都会执行；</li><li>当try和catch中有return时，ﬁnally仍然会执行；</li><li>ﬁnally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管ﬁnally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在ﬁnally执行前确定的；</li><li>ﬁnally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</li></ul><h5 id="13-和-的区别"><a href="#13-和-的区别" class="headerlink" title="13. &amp;和&amp;&amp;的区别"></a>13. &amp;和&amp;&amp;的区别</h5><ul><li>&amp;<ul><li>按位运算符</li><li>逻辑运算符<br>作为逻辑运算符时，&amp;左右两端条件式有一个为假就会不成立，但是两端都会运行。</li></ul></li><li>&amp;&amp;<br>&amp;&amp;也叫做短路运算符，因为只要左端条件式为假直接不成立，不会去判断右端条件式。</li></ul><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><h5 id="1-三色标记法"><a href="#1-三色标记法" class="headerlink" title="1. 三色标记法"></a>1. 三色标记法</h5><p>三色标记法将对象的颜色分为了黑、灰、白，三种颜色。<br>白色：该对象没有被标记过。（对象垃圾）<br>灰色：该对象已经被标记过了，但该对象下的属性没有全被标记完。（GC需要从此对象中去寻找垃圾）<br>黑色：该对象已经被标记过了，且该对象下的属性也全部都被标记过了。（程序所需要的对象）</p><p><strong>三色标记存在问题</strong></p><ul><li>浮动垃圾：并发标记的过程中，若一个已经被标记成黑色或者灰色的对象，突然变成了垃圾，由于不会再对黑色标记过的对象重新扫描,所以不会被发现，那么这个对象不是白色的但是不会被清除，重新标记也不能从GC Root中去找到，所以成为了浮动垃圾，浮动垃圾对系统的影响不大，留给下一次GC进行处理即可。</li><li>对象漏标问题（需要的对象被回收）：并发标记的过程中，一个业务线程将一个未被扫描过的白色对象断开引用成为垃圾（删除引用），同时黑色对象引用了该对象（增加引用）（这两部可以不分先后顺序）；因为黑色对象的含义为其属性都已经被标记过了，重新标记也不会从黑色对象中去找，导致该对象被程序所需要，却又要被GC回收，此问题会导致系统出现问题，而CMS与G1，两种回收器在使用三色标记法时，都采取了一些措施来应对这些问题，CMS对增加引用环节进行处理（Increment Update），G1则对删除引用环节进行处理(SATB)。</li></ul><h5 id="2-CMS收集器和G1收集器的区别"><a href="#2-CMS收集器和G1收集器的区别" class="headerlink" title="2. CMS收集器和G1收集器的区别"></a>2. CMS收集器和G1收集器的区别</h5><p><strong>使用范围不一样</strong><br>CMS收集器是老年代的收集器，可以配合新生代的Serial和ParNew收集器一起使用G1收集器收集范围是老年代和新生代。不需要结合其他收集器使用<strong>STW的时间</strong><br>CMS收集器以最小的停顿时间为目标的收集器。G1收集器可预测垃圾回收的停顿时间（建立可预测的停顿时间模型）<strong>垃圾碎片</strong><br>CMS收集器是使用“标记-清除”算法进行的垃圾回收，容易产生内存碎片G1收集器使用的是“标记-整理”算法，进行了空间整合，降低了内存空间碎片<strong>垃圾回收的过程不一样</strong><br>CMS收集器：初始标记-并发标记-重新标记-并发清理G1收集器：初始标记-并发标记-最终标记-筛选回收</p><blockquote><p>CMS的总结和优缺点<br>CMS采用 标记-清理 的算法，标记出垃圾对象，清除垃圾对象。算法是基于老年代执行的，因为新生代产生无法接受该算法产生的碎片垃圾。<br><strong>优点：</strong> 并发收集，低停顿<br><strong>不足：</strong><br>无法处理浮动垃圾，并发收集会造成内存碎片过多<br>由于并发标记和并发清理阶段都是并发执行，所以会额外消耗CPU资源<br>G1回收器的特点<br><strong>控制回收垃圾的时间：</strong> 这个是G1的优势，可以控制回收垃圾的时间，还可以建立停顿的时间模型，选择一组合适的Regions作为回收目标，达到实时收集的目的<br><strong>空间整理：</strong> 和CMS一样采用标记-清理的算法，但是G1不会产生空间碎片，这样就有效的使用了连续空间，不会导致连续空间不足提前造成GC的触发</p></blockquote><h5 id="3-类加载机制"><a href="#3-类加载机制" class="headerlink" title="3. 类加载机制"></a>3. 类加载机制</h5><p>JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化，使用，卸载</p><h5 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4. 双亲委派机制"></a>4. 双亲委派机制</h5><p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class）， 子类加载器才会尝试自己去加载。<strong>好处:</strong></p><ul><li>主要是为了安全性，避免用户自己编写的类动态替换 Java的一些核心类，比如 String。</li><li>同时也避免了类的重复加载，因为 JVM中区分不同类，不仅仅是根据类名，相同的 class文件被不 同的 ClassLoader加载就是不同的两个类。</li></ul><h5 id="5-GC如何判断对象可以被回收"><a href="#5-GC如何判断对象可以被回收" class="headerlink" title="5. GC如何判断对象可以被回收"></a>5. GC如何判断对象可以被回收</h5><ul><li>引用计数法：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计 数为0时可以回收</li><li>可达性分析法：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是不可用的，那么虚拟机就判断是可回收对象</li></ul><blockquote><p>引用计数法，可能会出现A 引用了 B，B 又引用了 A，这时候就算他们都不再使用了，但因为相互引用计数器&#x3D;1永远无法被回收。</p></blockquote><p>GC Roots的对象有：<br>虚拟机栈(栈帧中的本地变量表）中引用的对象<br>方法区中类静态属性引用的对象<br>方法区中常量引用的对象<br>本地方法栈中JNI(即一般说的Native方法)引用的对象</p><p>可达性算法中的不可达对象并不是立即死亡的，对象拥有一次自我拯救的机会。对象被系统宣告死亡至少要经历两次标记过程：第一次是经过可达性分析发现没有与GC Roots相连接的引用链，第二次是在由虚拟机自动建立的Finalizer队列中判断是否需要执行finalize()方法。<br>当对象变成(GC Roots)不可达时，GC会判断该对象是否覆盖了finalize方法，若未覆盖，则直接将其回 收。否则，若对象未执行过finalize方法，将其放入F-Queue队列，由一低优先级线程执行该队列中对象的finalize方法。执行finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”<br>每个对象只能触发一次finalize()方法<br>由于finalize()方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，不推荐大家使用，建议遗忘它</p><h5 id="6-JVM垃圾收集器比较"><a href="#6-JVM垃圾收集器比较" class="headerlink" title="6. JVM垃圾收集器比较"></a>6. JVM垃圾收集器比较</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84cd94b1369e45508fac7276b8c75f3d~tplv-k3u1fbpfcp-watermark.image" alt="截屏2022-04-18 23.23.16"></p><p><strong>Serial 垃圾收集器(单线程、复制算法)</strong></p><blockquote><p>只会使用一个 CPU 或一条线程去完成垃圾收集工作, 并且在进行垃圾收集的同时, 必须暂停其他所有的工作线程, 直到垃圾收集结束, Serial 垃圾收集器虽然在收集垃圾的过程中需要所有其他的工作线程, 但是简单高效, 对于单个 CPU 的情况下, 没有线程交互的开销, 可以获得最高的单线程垃圾收集的效率</p><ul><li>优点 : 简单高效, 拥有很好的单线程收集效率</li><li>缺点 : 收集过程需要暂停所有工作线程</li><li>算法 : 复制算法</li><li>适用范围 : 新生代</li><li>应用 : Client 模式下的默认新生代收集器<br><strong>ParNew 垃圾收集器(Serial + 多线程、复制算法)</strong><br>ParNew 类似 Serial 垃圾收集器, 不同点是多线程进行操作的, ParNew 收集器默认开启 CPU 条目相同的线程数, 可以通过 -XX:ParallelGCThreads 参数来限制垃圾收集器的线程数</li><li>优点 : 在多个 CPU 的情况下, 效率比 Serial 收集器高</li><li>缺点 : 收集过程需要暂停所有工作线程, 单线程情况下比 Serial 收集器差</li><li>算法 : 复制算法</li><li>适用范围 : 新生代</li><li>应用 : Server 模式下虚拟机中首选的新生代收集器<br><strong>Parallel Scavenge 垃圾收集器(多线程复制算法)</strong><br>Parallel Scavenge 同样使用复制算法, 也是一个多线程的垃圾收集器, 主要关注的是程序达到一个可控制的吞吐量. 高吞吐量可以最高效率地利用 CPU 时间, 尽快地完成程序的运算任务, 主要适用于在后台运算而不需要太多交互的任务<br><strong>Serial Old 垃圾收集器(单线程标记整理算法)</strong><br>Serial Old 是 Serial 垃圾收集器老年代版本, 是一个单线程的收集器, 使用标记整理算法<br><strong>Parallel Old 垃圾收集器(多线程标记整理算法)</strong><br>Parallel Old 是 Parallel Scavenge 老年代版本, 使用多线程标记整理算法, 在 JDK 1.6 之前的新生代都是使用 Parallel Scavenge 收集器搭配老年代 Serial Old 收集器, 只可以保证新生代的吞吐量, 无法保证整体的吞吐量. Parallel Old 正式为了保证老年代同样的吞吐量优先的垃圾收集器. 当系统对吞吐量要求比较高的时候, 可以考虑 Parallel Scavenge 搭配 Parallel Old 垃圾收集器<br><strong>CMS 垃圾收集器(单线程标记清除算法)</strong><br>Concurrent Mark Sweep 收集器是一种老年代垃圾收集器, 主要目标是获取最短垃圾回收停顿时间, 和其他的老年代使用标记整理算法不一致, 而是采用的是多线程标记清楚算法, 这样可以对交互比较高的应用程序提高用户的体验</li><li>CMS 分为四个阶段<ul><li>初始标记<br>标记 GCRoots 能够关联的对象, 但是需要短暂地停止所有的工作线程</li><li>并发标记<br>进行 GCRoots 跟踪过程, 和用户线程一起工作, 不需要暂停工作线程</li><li>重新标记<br>修正正在并发标记期间, 因为程序继续运行时导致标记产生变动的那一部分对象的标记记录, 需要暂停所有的工作线程</li><li>并发清除<br>和用户线程一起工作清楚那些 GCRoots 不可达的对象, 不需要暂停工作线程, 由于耗时最长的并发标记和并发清除过程中, 垃圾收集器可以和用户一起并发地工作, 所以 CMS 收集器的内存回收是和用户线程一起并发执行的</li></ul></li><li>优点 : 并发收集, 低停顿</li><li>缺点 : 会产生大量的空间碎片, 并发阶段会降低吞吐量</li></ul></blockquote><p><strong>G1 垃圾收集器(单线程标记整理算法)</strong></p><blockquote><p>对比 CMS 做出的改进</p><ul><li>基于标记整理算法, 不会产生内存碎片</li><li>可以精确地控制停顿时间, 在不牺牲吞吐量的情况下, 实现低停顿垃圾回收</li><li>G1 收集器避免全局区域垃圾收集, 把堆内存划分为大小固定的几个区域, 并且跟踪这些区域的垃圾收集进度, 并在后台维护一个优先级列表, 每次根据所允许的收集时间, 优先回收垃圾最多的区域. 区域划分和优先级区域回收机制, 确保 G1 收集器可以在有限的时间内获取最高的垃圾收集效率</li><li>特点</li><li>并行与并发、分代收集、空间整合[Mark Compact, 不会出现内存碎片]、可预测停顿[能让使用者指定一个 M 毫秒单位的时间段, 消耗在垃圾收集器的时间不能超过这个值]</li><li>应用 :<ul><li>50% 以上的堆被存活对象占用</li><li>对象的分配和晋升的速度变化大</li><li>垃圾回收时间比较长</li></ul></li></ul></blockquote><h5 id="7-JVM-垃圾回收算法"><a href="#7-JVM-垃圾回收算法" class="headerlink" title="7. JVM 垃圾回收算法"></a>7. JVM 垃圾回收算法</h5><p><strong>标记清除算法 Mark Sweep</strong></p><ul><li>分为两个阶段 <code>标记 - 清除</code>, 标记阶段通过根节点进行搜索标记所有可达对象, 清除阶段清除回收不可达的对象所占用的空间</li><li>该算法的缺点是内存的碎片化严重, 以后可能不能分配连续空间给新创建的大对象存储</li></ul><p><strong>复制算法 Coping</strong><br>为了解决标记清楚算法内存碎片化的问题而提出的算法, 首先按照内存的容量将内存分为两块大小一样的空间, 每次只是使用其中的一块, 当这块内存满了之后将可达对象复制到另一块去, 最后清空已使用的内存空间<br>它的缺点是: 造成空间浪费, 一旦存活的对象增多, 其效率也会逐渐降低</p><p><strong>标记整理算法 Mark Compact</strong><br>结合标记清楚算法和复制算法后, 为了避免缺陷提出来的标记整理算法, 标记阶段和标记清楚算法相同, 但是标记后不再是回收不可达对象, 而是将存活的可达对象移到内存的一端, 然后清理边界外的空间</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="1-什么是线程安全？Vector是一个线程安全类吗？"><a href="#1-什么是线程安全？Vector是一个线程安全类吗？" class="headerlink" title="1. 什么是线程安全？Vector是一个线程安全类吗？"></a>1. 什么是线程安全？Vector是一个线程安全类吗？</h5><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分 成两组，线程安全和非线程安全的。Vector 是用同步方法来实现线程安全的, 而和它相似的ArrayList不是线程安全的。</p><h5 id="2-什么是死锁"><a href="#2-什么是死锁" class="headerlink" title="2. 什么是死锁"></a>2. 什么是死锁</h5><p>何为死锁，就是多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。产生死锁的必要条件：</p><ul><li>互斥条件：所谓互斥就是进程在某一时间内独占资源。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:进程已获得资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul><h5 id="3-volatile关键字的作用"><a href="#3-volatile关键字的作用" class="headerlink" title="3. volatile关键字的作用"></a>3. volatile关键字的作用</h5><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：<br>1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的,volatile关键字会强制将修改的值立即写入主存。<br>2）禁止进行指令重排序。<br>volatile 不是原子性操作<br>什么叫保证部分有序性?<br>当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行</p><h5 id="4-在-java-中守护线程和本地线程区别"><a href="#4-在-java-中守护线程和本地线程区别" class="headerlink" title="4. 在 java 中守护线程和本地线程区别"></a>4. 在 java 中守护线程和本地线程区别</h5><p>java中的线程分为两种：守护线程（Daemon）和用户线程（User）。<br>任何线程都可以设置为守护线程和用户线程，通过方法Thread.setDaemon(bool on)；true则把该线程设置为守护线程，反之则为用户线程。Thread.setDaemon()必须在Thread.start()之前调用，否则运行时会抛出异常。<br><strong>两者的区别：</strong><br>唯一的区别是判断虚拟机(JVM)何时离开，Daemon是为其他线程提供服务，如果全部的User Thread已经撤离，Daemon 没有可服务的线程，JVM撤离。也可以理解为守护线程是JVM自动创建的线程（但不一定），用户线程是程序创建的线程；比如JVM的垃圾回收线程是一个守护线程，当所有线程已经撤离，不再产生垃圾，守护线程自然就没事可干了，当垃圾回收线程是Java虚拟机上仅剩的线程时，Java虚拟机会自动离开。</p><p>扩展：Thread Dump打印出来的线程信息，含有daemon字样的线程即为守护进程，可能会有：服务守护进程、编译守护进程、windows下的监听Ctrl+break的守护进程、Finalizer守护进程、引用处理守护进程、GC守护进程。</p><h5 id="5-线程与进程的区别"><a href="#5-线程与进程的区别" class="headerlink" title="5. 线程与进程的区别"></a>5. 线程与进程的区别</h5><p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。<br>一个程序至少有一个进程,一个进程至少有一个线程。</p><h5 id="6-线程池的四种拒绝策略"><a href="#6-线程池的四种拒绝策略" class="headerlink" title="6. 线程池的四种拒绝策略"></a>6. 线程池的四种拒绝策略</h5><p><strong>CallerRunsPolicy</strong> - 当触发拒绝策略，只要线程池没有关闭的话，则使用调用线程直接运行任务。一般并发比较小，性能要求不高，不允许失败。但是，由于调用者自己运行任务，如果任务提交速度过快，可能导致程序阻塞，性能效率上必然的损失较大<br><strong>AbortPolicy</strong>- 丢弃任务，并抛出拒绝执行 RejectedExecutionException 异常信息。线程池默认的拒绝策略。必须处理好抛出的异常，否则会打断当前的执行流程，影响后续的任务执行。<br><strong>DiscardPolicy</strong> - 直接丢弃，其他啥都没有<br><strong>DiscardOldestPolicy</strong> - 当触发拒绝策略，只要线程池没有关闭的话，丢弃阻塞队列 workQueue 中最老的一个任务，并将新任务加入</p><h5 id="7-线程池的常用参数"><a href="#7-线程池的常用参数" class="headerlink" title="7. 线程池的常用参数"></a>7. 线程池的常用参数</h5><p>一般的线程池主要分为以下 4 个组成部分：</p><ul><li>线程池管理器：用于创建并管理线程池</li><li>工作线程：线程池中的线程</li><li>任务接口：每个任务必须实现的接口，用于工作线程调度其运行</li><li>任务队列：用于存放待处理的任务，提供一种缓冲机制</li></ul><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>corePoolSize</td><td>核心线程数</td></tr><tr><td>maximumPoolSize</td><td>最大线程数</td></tr><tr><td>keepAliveTime+时间单位</td><td>空闲线程的存活时间</td></tr><tr><td>ThreadFactory</td><td>线程工厂，用来创建新线程</td></tr><tr><td>workQueue</td><td>用于存放任务的队列</td></tr><tr><td>Handler</td><td>处理被拒绝的任务</td></tr></tbody></table><h5 id="8-synchronized与Lock的区别"><a href="#8-synchronized与Lock的区别" class="headerlink" title="8. synchronized与Lock的区别"></a>8. synchronized与Lock的区别</h5><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字,在JVM层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1.以获取锁的线程执行完同步代码，释放锁2.线程执行发生异常，JVM会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待，如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁的状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平(两者皆可)</td></tr><tr><td>性能</td><td>少量同步</td><td>大量同步</td></tr></tbody></table><p>区别如下:</p><ul><li>来源:lock是一个接口，而synchronized是java的一个关键字，synchronized是内置的语言实现</li><li>异常是否释放锁: synchronized在发生异常时候会自动释放占有的锁，因此不会出现死锁；而lock发生异常时候，不会主动释放占有的锁，必须手动unlock来释放锁，可能引起死锁的发生。（所以最好将同步代码块用try catch包起来，finally中写入unlock，避免死锁的发生。）</li><li>是否响应中断: lock等待锁过程中可以用interrupt来中断等待，而synchronized只能等待锁的释放，不能响应中断；</li><li>是否知道获取锁: Lock可以通过trylock来知道有没有获取锁，而synchronized不能；</li><li>Lock可以提高多个线程进行读操作的效率。（可以通过readwritelock实现读写分离）</li><li>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</li><li>synchronized使用Object对象本身的wait 、notify、notifyAll调度机制，而Lock可以使用Condition进行线程之间的调度</li></ul><h5 id="9-线程的生命周期？线程有几种状态"><a href="#9-线程的生命周期？线程有几种状态" class="headerlink" title="9. 线程的生命周期？线程有几种状态"></a>9. 线程的生命周期？线程有几种状态</h5><p>(1) 线程通常有五种状态，创建，就绪，运行、阻塞和死亡状态。(2) 阻塞的情况又分为三种：</p><ul><li>等待阻塞：运行的线程执行wait方法，该线程会释放占用的所有资源，JVM会把该线程放入“等待池”中。进入这个状态后，是不能自动唤醒的，必须依靠其他线程调用notify或notifyAll方法才能被唤 醒，wait是object类的方法。</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入“锁池”中。</li><li>其他阻塞：运行的线程执行sleep或join方法，或者发出了I&#x2F;O请求时，JVM会把该线程置为阻塞状 态。当sleep状态超时、join等待线程终止或者超时、或者I&#x2F;O处理完毕时，线程重新转入就绪状态。sleep是Thread类的方法。</li></ul><p><strong>新建状态（New）：</strong> 新创建了一个线程对象。<br><strong>就绪状态（Runnable）：</strong> 线程对象创建后，其他线程调用了该对象的start方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br><strong>运行状态（Running）：</strong> 就绪状态的线程获取了CPU，执行程序代码。<br><strong>阻塞状态（Blocked）：</strong> 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。<br><strong>死亡状态（Dead）：</strong> 线程执行完了或者因异常退出了run方法，该线程结束生命周期。</p><h5 id="10-说说自己是怎么使用-synchronized-关键字，在项目中用到synchronized关键字最主要的三种使用方式"><a href="#10-说说自己是怎么使用-synchronized-关键字，在项目中用到synchronized关键字最主要的三种使用方式" class="headerlink" title="10. 说说自己是怎么使用 synchronized 关键字，在项目中用到synchronized关键字最主要的三种使用方式"></a>10. 说说自己是怎么使用 synchronized 关键字，在项目中用到synchronized关键字最主要的三种使用方式</h5><p><strong>修饰实例方法:</strong>  作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁<br><strong>修饰静态方法:</strong>  也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（ static 表明这是该类的一个静态资源，不管new了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，因为访问静态 synchronized 方法占用的锁是当前类的锁，而访问非静态synchronized 方法占用的锁是当前实例对象锁。<br><strong>修饰代码块:</strong>  指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。<br>总结： synchronized 关键字加到 static 静态方法和 synchronized(class)代码块上都是是给 Class 类上锁。synchronized 关键字加到实例方法上是给对象实例上锁。尽量不要使用synchronized(String a) 因为JVM中，字符串常量池具有缓存功能</p><h5 id="11-Java中用到的线程调度算法是什么？"><a href="#11-Java中用到的线程调度算法是什么？" class="headerlink" title="11. Java中用到的线程调度算法是什么？"></a>11. Java中用到的线程调度算法是什么？</h5><p>有两种调度模型：<strong>分时调度</strong>模型和<strong>抢占式</strong>调度模型。<br>分时调度模型是指让所有的线程轮流获得 cpu 的使用权,并且平均分配每个线程占用的CPU 的时间片。<br>java 虚拟机采用抢占式调度模型，是指优先让可运行池中优先级高的线程占用CPU，如果可运行池中的线程优先级相同，那么就随机选择一个线程，使其占用CPU。处于运行状态的线程会一直运行，直至它不得不放弃 CPU。</p><h5 id="12-ThreadLocal原理介绍及应用场景"><a href="#12-ThreadLocal原理介绍及应用场景" class="headerlink" title="12. ThreadLocal原理介绍及应用场景"></a>12. ThreadLocal原理介绍及应用场景</h5><p>每一个 <code>Thread</code>对象均含有一个 <code>ThreadLocalMap</code>类型的成员变量 <code>threadLocals</code>，它存储本线程中所有 <code>ThreadLocal</code>对象及其对应的值 <code>ThreadLocalMap</code>由一个个 <code>Entry</code>对象构成 <code>Entry</code>继承自 <code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>，一个 <code>Entry</code>由 <code>ThreadLocal</code>对象和Object构成。由此可见，<code>Entry</code>的key为 <code>ThreadLocal</code>对象，并且是一个弱引用。当没指向key的强引用后，该key就会被垃圾收集器回收。当执行set方法时，<code>ThreadLocal</code>首先会获取当前线程的对象，然后获取当前线程的 <code>ThreadLocalMap</code>对象，再以当前 <code>ThreadLocal</code>对象为key，将值存储进 <code>ThreadLocalMap</code>对象中。当执行get方法时，ThreadLocal首先会获取当前线程的对象，然后获取当前线程的 <code>ThreadLocalMap</code>对象，再以当前 <code>ThreadLocal</code>对象为key，获取对应的value。由于每一个线程均含有各自私有的 <code>ThreadLocalMap</code>容器，这些容器相互独立互不影响，因此不会存在线程安全性问题，从而也无需使用同步机制来保证多线程访问容器的互斥性。<strong>使用场景:</strong></p><ul><li>在进行对象跨层传递的时候，使用 <code>ThreadLocal</code>可以避免多次传递，打破层次间的约束。</li><li>线程间数据隔离。</li><li>进行事务操作，用于存储线程事务信息。</li><li>数据库连接，Session会话管理。</li></ul><h5 id="13"><a href="#13" class="headerlink" title="13."></a>13.</h5><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><h5 id="1-Autowired和-Resource关键字的区别"><a href="#1-Autowired和-Resource关键字的区别" class="headerlink" title="1. @Autowired和@Resource关键字的区别"></a>1. @Autowired和@Resource关键字的区别</h5><p>@Resource和@Autowired都是做bean的注入时使用，其实@Resource并不是Spring的注解，它的包是javax.annotation.Resource，需要导入，但是Spring支持该注解的注入。</p><ul><li>共同点<br>两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。</li><li>不同点<br><strong>@Autowired</strong><br>@Autowired为Spring提供的注解，需要导入包<br>org.springframework.beans.factory.annotation.Autowired;只按照byType注入<br>@Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualiﬁer注解一起使用。<br><strong>@Resource</strong><br>@Resource默认按照ByName自动注入，由J2EE提供，需要导入包javax.annotation.Resource。@Resource有两个重要的属性：name和type，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以，如果使用name属性，则使 用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制 使用byName自动注入策略</li></ul><h5 id="2-spring-支持几种bean-scope"><a href="#2-spring-支持几种bean-scope" class="headerlink" title="2. spring 支持几种bean scope"></a>2. spring 支持几种bean scope</h5><p>Spring bean 支持 5 种 scope：<br><strong>Singleton</strong> - 每个 Spring IoC 容器仅有一个单实例。<br><strong>Prototype</strong> - 每次请求都会产生一个新的实例。<br><strong>Request</strong> - 每一次 HTTP 请求都会产生一个新的实例，并且该 bean 仅在当前 HTTP 请求内有效。<br><strong>Session</strong> - 每一次 HTTP 请求都会产生一个新的 bean，同时该 bean 仅在当前HTTP session 内有效。<br><strong>Global-session</strong> - 类似于标准的 HTTP Session 作用域，不过它仅仅在基于portlet 的 web 应用中才有意义。Portlet规范定义了全局 Session 的概念，它被所有构成某个 portlet web 应用的各种不同的 portlet 所共享。在 globalsession 作用域中定义的 bean 被限定于全局 portlet Session<br>的生命周期范围内。如果你在 web 中使用 global session 作用域来标识 bean，那么 web会自动当成 session 类型来使用。<br>仅当用户使用支持 Web 的 ApplicationContext 时，最后三个才可用。</p><h5 id="3-Component-Controller-Repository和-Service-有何区别？"><a href="#3-Component-Controller-Repository和-Service-有何区别？" class="headerlink" title="3. @Component, @Controller, @Repository和@Service 有何区别？"></a>3. @Component, @Controller, @Repository和@Service 有何区别？</h5><p><strong>@Component  ：</strong> 这将 java 类标记为 bean。它是任何 Spring 管理组件的通用构造型。spring 的组件扫描机制现在可以将其拾取并将其拉入应用程序环境中。<br><strong>@Controller ：</strong> 这将一个类标记为 Spring Web MVC 控制器。标有它的Bean 会自动导入到 IoC 容器中。<br><strong>@Service ：</strong> 此注解是组件注解的特化。它不会对@Component注解提供任何其他行为。您可以在服务层类中使用@Service而不是@Component：因为它以更好的方式指定了意图。<br><strong>@Repository  ：</strong> 这个注解是具有类似用途和功能的@Component注解的特化。它为 DAO 提供了额外的好处。它将 DAO 导入 IoC 容器，并使未经检查的异常有资格转换为 Spring DataAccessException。</p><h5 id="4-Spring事务的实现方式和原理以及隔离级别"><a href="#4-Spring事务的实现方式和原理以及隔离级别" class="headerlink" title="4. Spring事务的实现方式和原理以及隔离级别"></a>4. Spring事务的实现方式和原理以及隔离级别</h5><p>在使用Spring框架时，可以有两种使用事务的方式，一种是编程式的，一种是申明式的，@Transactional注解就是申明式的。首先，事务这个概念是数据库层面的，Spring只是基于数据库中的事务进行了扩展，以及提供了一些能让程序员更加方便操作事务的方式。比如我们可以通过在某个方法上增加@Transactional注解，就可以开启事务，这个方法中所有的sql都会在一个事务中执行，统一成功或失败。在一个方法上加了@Transactional注解后，Spring会基于这个类生成一个代理对象，会将这个代理对象作为bean，当在使用这个代理对象的方法时，如果这个方法上存在@Transactional注解，那么代理逻辑会先把事务的自动提交设置为false，然后再去执行原本的业务逻辑方法，如果执行业务逻辑方法没有出现异常，那么代理逻辑中就会将事务进行提交，如果执行业务逻辑方法出现了异常，那么则会将事务进行回滚。当然，针对哪些异常回滚事务是可以配置的，可以利用@Transactional注解中的rollbackFor属性进行配置，默认情况下会对RuntimeException和Error进行回滚。<br>spring事务隔离级别就是数据库的隔离级别：外加一个默认级别</p><ul><li>read uncommitted（未提交读）</li><li>read committed（提交读、不可重复读）</li><li>repeatable read（可重复读）</li><li>serializable（可串行化）</li></ul><h5 id="5-spring事务什么时候会失效"><a href="#5-spring事务什么时候会失效" class="headerlink" title="5. spring事务什么时候会失效?"></a>5. spring事务什么时候会失效?</h5><p>spring事务的原理是AOP，进行了切面增强，那么失效的根本原因是这个AOP不起作用了！常见情况有如下几种</p><ul><li>发生自调用，类里面使用this调用本类的方法（this通常省略），此时这个this对象不是代理类，而是UserService对象本身！解决方法很简单，让那个this变成UserService的代理类即可！</li><li>方法不是public的</li><li>数据库不支持事务</li><li>没有被spring管理</li><li>异常被吃掉，事务不会回滚(或者抛出的异常没有被定义，默认为RuntimeException)</li></ul><h5 id="6-BeanFactory和ApplicationContext有什么区别？"><a href="#6-BeanFactory和ApplicationContext有什么区别？" class="headerlink" title="6. BeanFactory和ApplicationContext有什么区别？"></a>6. BeanFactory和ApplicationContext有什么区别？</h5><p>ApplicationContext是BeanFactory的子接口ApplicationContext提供了更完整的功能：①继承MessageSource，因此支持国际化。②统一的资源文件访问方式。③提供在监听器中注册bean的事件。④同时加载多个配置文件。⑤载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层。</p><ul><li>BeanFactroy采用的是延迟加载形式来注入Bean的，即只有在使用到某个Bean时(调用getBean())，才对该Bean进行加载实例化。这样，我们就不能发现一些存在的Spring的配置问题。如果Bean的某一个属性没有注入，BeanFacotry加载后，直至第一次使用调用getBean方法才会抛出异常</li><li>ApplicationContext，它是在容器启动时，一次性创建了所有的Bean。这样，在容器启动时，我们就可以发现Spring中存在的配置错误，这样有利于检查所依赖属性是否注入。ApplicationContext启动后预载入所有的单实例Bean，通过预载入单实例bean ,确保当你需要的时候，你就不用等待，因为它们已经创建好了。</li><li>相对于基本的BeanFactory，ApplicationContext 唯一的不足是占用内存空间。当应用程序配置Bean较多时，程序启动较慢。</li><li>BeanFactory通常以编程的方式被创建，ApplicationContext还能以声明的方式创建，如使用ContextLoader。</li><li>BeanFactory和ApplicationContext都支持BeanPostProcessor、BeanFactoryPostProcessor的使用，但两者之间的区别是：BeanFactory需要手动注册，而ApplicationContext则是自动注册。</li></ul><h5 id="7-SpringMVC-工作流程"><a href="#7-SpringMVC-工作流程" class="headerlink" title="7. SpringMVC 工作流程"></a>7. SpringMVC 工作流程</h5><ul><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li><li>处理器映射器找到具体的处理器(可以根据 xml 配置、注解进行查找)，生成处理器及处理器拦截器(如果有则生成)一并返回给 DispatcherServlet。</li><li>DispatcherServlet 调用 HandlerAdapter 处理器适配器。</li><li>HandlerAdapter 经过适配调用具体的处理器(Controller，也叫后端控制器)</li><li>Controller 执行完成返回 ModelAndView。</li><li>HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li><li>ViewReslover 解析后返回具体 View。</li><li>DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet 响应用户。</li></ul><h5 id="8-Seata应用场景以及优缺点"><a href="#8-Seata应用场景以及优缺点" class="headerlink" title="8. Seata应用场景以及优缺点"></a>8. Seata应用场景以及优缺点</h5><p><strong>应用场景:</strong></p><ul><li>业务流程长、业务流程多</li><li>参与者包含其它公司或遗留系统服务，无法提供 TCC 模式要求的三个接口<br><strong>优势:</strong></li><li>一阶段提交本地事务，无锁，高性能</li><li>事件驱动架构，参与者可异步执行，高吞吐</li><li>补偿服务易于实现<br><strong>缺点:</strong></li><li>不保证隔离性</li></ul><h5 id="9-Spring-Boot-自动配置原理"><a href="#9-Spring-Boot-自动配置原理" class="headerlink" title="9. Spring Boot 自动配置原理"></a>9. Spring Boot 自动配置原理</h5><p>@Import + @Configuration  +  Spring spi<br>自动配置类由各个starter提供，使用@Configuration + @Bean定义配置类，放到META-<br>INF&#x2F;spring.factories下<br>使用Spring spi扫描META-INF&#x2F;spring.factories下的配置类<br>使用@Import导入自动配置类</p><h5 id="10-spring-bean的生命周期"><a href="#10-spring-bean的生命周期" class="headerlink" title="10. spring bean的生命周期"></a>10. spring bean的生命周期</h5><p>首先说一下Servlet的生命周期：实例化，初始init，接收请求service，销毁destroy；Spring上下文中的Bean生命周期也类似，如下：</p><ul><li>实例化Bean：<br>对于BeanFactory容器，当客户向容器请求一个尚未初始化的bean时，或初始化bean的时候需要注入另一个尚未初始化的依赖时，容器就会调用createBean进行实例化。对于ApplicationContext容器，当容器启动结束后，通过获取BeanDeﬁnition对象中的信息，实例化所有的bean。</li><li>设置对象属性（依赖注入）：<br>实例化后的对象被封装在BeanWrapper对象中，紧接着，Spring根据BeanDeﬁnition中的信息  以及  通过BeanWrapper提供的设置属性的接口完成依赖注入。</li><li>处理Aware接口：<br>接着，Spring会检测该对象是否实现了xxxAware接口，并将相关的xxxAware实例注入给Bean：<br>①如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的就是Spring配置文件中Bean的id值；<br>②如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()方法，传递的是Spring工厂自身。<br>③如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文；</li><li>BeanPostProcessor：<br>如果想对Bean进行一些自定义的处理，那么可以让Bean实现了BeanPostProcessor接口，那将会调用postProcessBeforeInitialization(Object obj, String s)方法。</li><li>InitializingBean 与 init-method：<br>如果Bean在Spring配置文件中配置了 init-method 属性，则会自动调用其配置的初始化方法。</li><li>如果这个Bean实现了BeanPostProcessor接口，将会调用postProcessAfterInitialization(Object obj, String s)方法；由于这个方法是在Bean初始化结束时调用的，所以可以被应用于内存或缓存技术</li></ul><blockquote><p>以上几个步骤完成后，Bean就已经被正确创建了，之后就可以使用这个Bean了</p></blockquote><ul><li>DisposableBean：<br>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，会调用其实现的destroy()方法；</li><li>destroy-method：<br>最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法</li></ul><h5 id="11-Spring循环依赖之一、二、三级缓存"><a href="#11-Spring循环依赖之一、二、三级缓存" class="headerlink" title="11. Spring循环依赖之一、二、三级缓存"></a>11. Spring循环依赖之一、二、三级缓存</h5><ul><li>这里所说的一级、二级、三级缓存，只是在循环依赖中才会用到。如果没有循环依赖逻辑，不会用到这三个缓存。</li><li>一级缓存存放实例化完成，且属性填充后的对象。二级缓存存放对象实例化完成后，还没有填充完属性值的对象。三级缓存存放的是工厂对象。存放实例化对象所需要的工厂。</li></ul><h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h4><h5 id="1-注册中心ZooKeeper、Eureka、Consul-、Nacos对比"><a href="#1-注册中心ZooKeeper、Eureka、Consul-、Nacos对比" class="headerlink" title="1. 注册中心ZooKeeper、Eureka、Consul 、Nacos对比"></a>1. 注册中心ZooKeeper、Eureka、Consul 、Nacos对比</h5><table><thead><tr><th align="left"></th><th align="left"><strong>Nacos</strong></th><th align="left"><strong>Eureka</strong></th><th align="left"><strong>Consul</strong></th><th align="left"><strong>CoreDNS</strong></th><th align="left"><strong>Zookeeper</strong></th></tr></thead><tbody><tr><td align="left">一致性协议</td><td align="left">CP+AP</td><td align="left">AP</td><td align="left">CP</td><td align="left">—</td><td align="left">CP</td></tr><tr><td align="left">健康检查</td><td align="left">TCP&#x2F;HTTP&#x2F;MYSQL&#x2F;Client Beat</td><td align="left">Client Beat</td><td align="left">TCP&#x2F;HTTP&#x2F;gRPC&#x2F;Cmd</td><td align="left">—</td><td align="left">Keep Alive</td></tr><tr><td align="left">负载均衡策略</td><td align="left">权重&#x2F; metadata&#x2F;Selector</td><td align="left">Ribbon</td><td align="left">Fabio</td><td align="left">RoundRobin</td><td align="left">—</td></tr><tr><td align="left">雪崩保护</td><td align="left">有</td><td align="left">有</td><td align="left">无</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">自动注销实例</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">访问协议</td><td align="left">HTTP&#x2F;DNS</td><td align="left">HTTP</td><td align="left">HTTP&#x2F;DNS</td><td align="left">DNS</td><td align="left">TCP</td></tr><tr><td align="left">监听支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">多数据中心</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">跨注册中心同步</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">SpringCloud集成</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">Dubbo集成</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">K8S集成</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">不支持</td></tr></tbody></table><h5 id="2-CAP和BASE理论"><a href="#2-CAP和BASE理论" class="headerlink" title="2. CAP和BASE理论"></a>2. CAP和BASE理论</h5><p><strong>CAP理论</strong>2000年7月，加州大学伯克利分校的Eric Brewer教授在ACM PODC会议上提出CAP猜想。2年后，麻省理工学院的Seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认定理。CAP理论为：一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。</p><ul><li>一致性（Consistency）<br>一致性指“all nodes see the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。</li><li>可用性（Availability）<br>可用性指“Reads and writes always succeed”，即服务一直可用，而且是正常响应时间。</li><li>分区容错性（Partition tolerance）<br>分区容错性指“the system continues to operate despite arbitrary message loss or failure of part of the system”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。<br>一个分布式系统里面，节点组成的网络本来应该是连通的。然而可能因为一些故障，使得有些节点之间不连通了，整个网络就分成了几块区域。数据就散布在了这些不连通的区域中。这就叫分区。<br>当你一个数据项只在一个节点中保存，那么分区出现后，和这个节点不连通的部分就访问不到这个数据了。这时分区就是无法容忍的。<br>提高分区容忍性的办法就是一个数据项复制到多个节点上，那么出现分区之后，这一数据项就可能分布到各个区里。容忍性就提高了。<br>然而，要把数据复制到多个节点，就会带来一致性的问题，就是多个节点上面的数据可能是不一致的。要保证一致，每次写操作就都要等待全部节点写成功，而这等待又会带来可用性的问题。<br>总的来说就是，数据存在的节点越多，分区容忍性越高，但要复制更新的数据就越多，一致性就越难保证。为了保证一致性，更新所有节点数据所需要的时间就越长，可用性就会降低。<br><strong>CAP权衡</strong><br>通过CAP理论，我们知道无法同时满足一致性、可用性和分区容错性这三个特性，那要舍弃哪个呢？<br>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。<br>对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。貌似这几年国内银行业发生了不下10起事故，但影响面不大，报到也不多，广大群众知道的少。还有一种是保证CP，舍弃A。例如网络故障事只读不写。<br>孰优孰略，没有定论，只能根据场景定夺，适合的才是最好的。<br><strong>BASE理论</strong><br>eBay的架构师Dan Pritchett源于对大规模分布式系统的实践总结，在ACM上发表文章提出BASE理论，BASE理论是对CAP理论的延伸，核心思想是即使无法做到强一致性（Strong Consistency，CAP的一致性就是强一致性），但应用可以采用适合的方式达到最终一致性（Eventual Consitency）。<br>BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。</li><li>基本可用（Basically Available）<br>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性，即保证核心可用。<br>电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</li><li>软状态（ Soft State）<br>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。mysql replication的异步复制也是一种体现。</li><li>最终一致性（ Eventual Consistency）<br>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。<br><strong>ACID和BASE的区别与联系</strong><br>ACID是传统数据库常用的设计理念，追求强一致性模型。BASE支持的是大型分布式系统，提出通过牺牲强一致性获得高可用性。<br>ACID和BASE代表了两种截然相反的设计哲学。<br>在分布式系统设计的场景中，系统组件对一致性要求是不同的，因此ACID和BASE又会结合使用。</li></ul><h5 id="3-负载均衡算法、类型"><a href="#3-负载均衡算法、类型" class="headerlink" title="3. 负载均衡算法、类型"></a>3. 负载均衡算法、类型</h5><p><strong>轮询法</strong><br>将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载。<br><strong>随机法</strong><br>通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果。<br><strong>源地址哈希法</strong><br>源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问。<br><strong>加权轮询法</strong><br>不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端。<br><strong>加权随机法</strong><br>与加权轮询法一样，加权随机法也根据后端机器的配置，系统的负载分配不同的权重。不同的是，它是按照权重随机请求后端服务器，而非顺序。<br><strong>最小连接数法</strong><br>最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p><h5 id="4-作为服务注册中心，Eureka比Zookeeper好在哪里"><a href="#4-作为服务注册中心，Eureka比Zookeeper好在哪里" class="headerlink" title="4. 作为服务注册中心，Eureka比Zookeeper好在哪里?"></a>4. 作为服务注册中心，Eureka比Zookeeper好在哪里?</h5><ul><li>Eureka保证的是可用性和分区容错性，Zookeeper 保证的是一致性和分区容错性。</li><li>Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障。而不会像zookeeper那样使整个注册服务瘫痪。</li></ul><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h5 id="1-Redis的拒绝策略"><a href="#1-Redis的拒绝策略" class="headerlink" title="1. Redis的拒绝策略"></a>1. Redis的拒绝策略</h5><p>**volatile-lru(推荐)**：使用LRU算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的key），只淘汰设定了有效期的key<br><strong>allkeys-lru：</strong> 使用LRU算法进行数据淘汰，所有的key都可以被淘汰<br><strong>volatile-random：</strong> 随机淘汰数据，只淘汰设定了有效期的key<br><strong>allkeys-random：</strong> 随机淘汰数据，所有的key都可以被淘汰<br><strong>volatile-ttl：</strong> 淘汰剩余有效期最短的key<br><strong>noeviction(默认策略)：</strong> 对于写请求不再提供服务，直接返回错误(DEL请求和部分特殊请求除外)</p><h5 id="2-缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级"><a href="#2-缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级" class="headerlink" title="2. 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级"></a>2. 缓存雪崩、缓存穿透、缓存预热、缓存更新、缓存降级</h5><h6 id="1-缓存雪崩"><a href="#1-缓存雪崩" class="headerlink" title="(1) 缓存雪崩"></a>(1) 缓存雪崩</h6><p>我们可以简单的理解为：由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库CPU和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。<br><strong>解决办法：</strong><br>大多数系统设计者考虑用加锁（  最多的解决方案）或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效 时大量的并发请求落到底层存储系统上。还有一个简单方案就时讲缓存失效时间分散开。</p><h6 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="(2) 缓存穿透"></a>(2) 缓存穿透</h6><p>缓存穿透是指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。<br><strong>解决办法:</strong><br>最常见的则是采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。另外也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。通过这个直接设置的默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。5TB的硬盘上放满了数据，请写一个算法将这些数据进行排重。如果这些数据是一些32bit大小的数据该如何解决？如果是64bit的呢？对于空间的利用到达了一种极致，那就是Bitmap和布隆过滤器(Bloom Filter)。<br>Bitmap：  典型的就是哈希表<br>缺点是，Bitmap对于每个元素只能记录1bit信息，如果还想完成额外的功能，恐怕只能靠牺牲更多的空间、时间来完成了<br>布隆过滤器（推荐）<br>就是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。<br>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。<br>Bloom-Filter算法的核心思想就是利用多个不同的Hash函数来解决“冲突”。Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是Bloom-Filter的基本思想。Bloom-Filter一般用于在大数据量的集合中判定某元素是否存在。</p><h6 id="3-缓存预热"><a href="#3-缓存预热" class="headerlink" title="(3) 缓存预热"></a>(3) 缓存预热</h6><p>缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！<br><strong>解决思路：</strong><br>1、直接写个缓存刷新页面，上线时手工操作下；<br>2、数据量不大，可以在项目启动的时候自动进行加载；<br>3、定时刷新缓存</p><h6 id="4-缓存更新"><a href="#4-缓存更新" class="headerlink" title="(4) 缓存更新"></a>(4) 缓存更新</h6><p>除了缓存服务器自带的缓存失效策略之外（Redis默认的有6中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：<br>（1）定时去清理过期的缓存；<br>（2）当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。<br>两者各有优劣，第一种的缺点是维护大量缓存的key是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡</p><h5 id="3-RDB-和-AOF-机制"><a href="#3-RDB-和-AOF-机制" class="headerlink" title="3. RDB 和 AOF 机制"></a>3. RDB 和 AOF 机制</h5><p><strong>RDB：Redis DataBase</strong><br>在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。<br>优点：<br>1、整个Redis数据库将只包含一个文件 dump.rdb，方便持久化。<br>2、容灾性好，方便备份。<br>3、性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能。<br>4.相对于数据集大时，比 AOF 的启动效率更高。<br>缺点：<br>1、数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)<br>2、由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。<br><strong>AOF：Append Only File</strong><br>以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录<br>优点：<br>1、数据安全，Redis中提供了3种同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中。<br>2、通过 append 模式写文件，即使中途服务器宕机也不会破坏已经存在的内容，可以通过 redis-<br>check-aof 工具解决数据一致性问题。<br>3、AOF 机制的 rewrite 模式。定期对AOF文件进行重写，以达到压缩的目的。</p><h5 id="4-是否使用过-Redis-集群，集群的原理是什么？"><a href="#4-是否使用过-Redis-集群，集群的原理是什么？" class="headerlink" title="4. 是否使用过 Redis 集群，集群的原理是什么？"></a>4. 是否使用过 Redis 集群，集群的原理是什么？</h5><ul><li>Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为master，继续提供服务。</li><li>Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。</li></ul><h5 id="5-单线程的redis为什么这么快？"><a href="#5-单线程的redis为什么这么快？" class="headerlink" title="5.单线程的redis为什么这么快？"></a>5.单线程的redis为什么这么快？</h5><ul><li>纯内存操作</li><li>单线程操作，避免了频繁的上下文切换</li><li>采用了非阻塞I&#x2F;O多路复用机制</li></ul><h5 id="6-为什么Redis的操作是原子性的，怎么保证原子性的？"><a href="#6-为什么Redis的操作是原子性的，怎么保证原子性的？" class="headerlink" title="6.为什么Redis的操作是原子性的，怎么保证原子性的？"></a>6.为什么Redis的操作是原子性的，怎么保证原子性的？</h5><p>对于Redis而言，命令的原子性指的是：一个操作的不可以再分，操作要么执行，要么不执行。<br/><br>Redis的操作之所以是原子性的，是因为Redis是单线程的。<br/><br>Redis本身提供的所有API都是原子操作，Redis中的事务其实是要保证批量操作的原子性。<br/><br><strong>多个命令在并发中也是原子性的吗？</strong><br/><br>不一定，  将get和set改成单命令操作，incr 。使用Redis的事务，或者使用Redis+Lua&#x3D;&#x3D;的方式实现。</p><h5 id="7-Redis事务"><a href="#7-Redis事务" class="headerlink" title="7.Redis事务"></a>7.Redis事务</h5><p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的<br/><br>Redis会将一个事务中的所有命令序列化，然后按顺序执行。<br/></p><ul><li>redis 不支持回滚“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”,所以 Redis 的内部可以保持简单且快速。<br/></li><li>如果在一个事务中的命令出现错误，那么所有的命令都不会执行; <br/></li><li>如果在一个事务中出现运行错误，那么正确的命令会被执行。<br/><ul><li>MULTI命令用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执<br>行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。<br/></li><li>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 nil 。</li><li>通过调用DISCARD，客户端可以清空事务队列，并放弃执行事务，并且客户端会从事务状态中退出。<br/></li><li>WATCH命令可以为Redis事务提供check-and-set（CAS）行为。可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。<br/></li></ul></li></ul><h5 id="8-redis-过期键的删除策略？"><a href="#8-redis-过期键的删除策略？" class="headerlink" title="8. redis 过期键的删除策略？"></a>8. redis 过期键的删除策略？</h5><ul><li>定时删除:在设置键的过期时间的同时，创建一个定时器 timer). 让定时器在键的过期时间来临时，立即执行对键的删除操作。</li><li>惰性删除:放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键;如果没有过期，就返回该键。</li><li>定期删除:每隔一段时间程序就对数据库进行一次检查，删除里面的过期键。至于要删除多少过期键，以及要检查多少个数据库，则由算法决定。</li></ul><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h5 id="1-MyISAM和InnoDB的区别"><a href="#1-MyISAM和InnoDB的区别" class="headerlink" title="1. MyISAM和InnoDB的区别"></a>1. MyISAM和InnoDB的区别</h5><p><strong>MyISAM：</strong><br>不支持事务，但是每次查询都是原子的；<br>支持表级锁，即每次操作是对整个表加锁；<br>存储表的总行数；<br>一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；<br>采用非聚集索引，索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致，但是辅索引<br>不用保证唯一性。<br><strong>InnoDb：</strong><br>支持ACID的事务，支持事务的四种隔离级别；<br>支持行级锁及外键约束：因此可以支持写并发；<br>不存储总行数；<br>一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；<br>主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</p><h5 id="2-索引"><a href="#2-索引" class="headerlink" title="2. 索引"></a>2. 索引</h5><p><strong>主键索引</strong><br>索引列中的值必须是唯一的，不允许有空值。<br><strong>普通索引</strong><br>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。<br><strong>唯一索引</strong><br>索引列中的值必须是唯一的，但是允许为空值。<br><strong>全文索引</strong><br>只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。MyISAM和InnoDB中都可以使用全文索引。<br><strong>空间索引</strong><br>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。<br><strong>前缀索引</strong><br>在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p><h5 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3. 事务隔离级别"></a>3. 事务隔离级别</h5><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Read Committed</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>Repeatable Read(可重复读)</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>Serializable(可串行化)</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><h5 id="4-聚簇和非聚簇索引的区别"><a href="#4-聚簇和非聚簇索引的区别" class="headerlink" title="4. 聚簇和非聚簇索引的区别"></a>4. 聚簇和非聚簇索引的区别</h5><p>都是B+树的数据结构</p><ul><li>聚簇索引：将数据存储与索引放到了一块、并且是按照一定的顺序组织的，找到索引也就找到了数据，数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻地存放在磁盘上的</li><li>非聚簇索引：叶子节点不存储数据、存储的是数据行地址，也就是说根据索引查找到数据行的位置 再取磁盘查找数据，这个就有点类似一本树的目录，比如我们要找第三章第一节，那我们先在这个目录里面找，找到对应的页码后再去对应的页码看文章。<br><strong>优缺点:</strong></li><li>优势：<br>(1) 查询通过聚簇索引可以直接获取数据，相比非聚簇索引需要第二次查询（非覆盖索引的情况下）效率要高<br>(2) 聚簇索引对于范围查询的效率很高，因为其数据是按照大小排列的<br>(3) 聚簇索引适合用在排序的场合，非聚簇索引不适合</li><li>劣势：<br>(1) 维护索引很昂贵，特别是插入新行或者主键被更新导至要分页(page split)的时候。建议在大量插<br>入新行后，选在负载较低的时间段，通过OPTIMIZE TABLE优化表，因为必须被移动的行数据可能造成碎片。使用独享表空间可以弱化碎片<br>(2) 表因为使用UUId（随机ID）作为主键，使数据存储稀疏，这就会出现聚簇索引有可能有比全表扫面 更慢，所以建议使用int的auto_increment作为主键<br>(3) 如果主键比较大的话，那辅助索引将会变的更大，因为辅助索引的叶子存储的是主键值；过长的主键值，会导致非叶子节点占用占用更多的物理空间</li></ul><h5 id="5-联合索引ABC的几种索引利用情况"><a href="#5-联合索引ABC的几种索引利用情况" class="headerlink" title="5. 联合索引ABC的几种索引利用情况"></a>5. 联合索引ABC的几种索引利用情况</h5><p>对于复合索引: Mysql从左到右的使用索引中的字段，一个查询可以只使用索引中的一部份，但只能是最左侧部分。例如索引是key index （a,b,c）。 可以支持a | a,b| a,b,c 3种组合进行查找，但不支持 b,c进行查找 .当最左侧字段是常量引用时，索引就十分有效。以下是一些例子：</p><ul><li>select * from myTest where a&#x3D;3 and b&#x3D;5 and c&#x3D;4; —- abc顺序<br>abc三个索引都在where条件里面用到了，而且都发挥了作用</li><li>select * from myTest where c&#x3D;4 and b&#x3D;6 and a&#x3D;3;<br>where里面的条件顺序在查询之前会被mysql自动优化，效果跟上一句一样</li><li>select * from myTest where a&#x3D;3 and c&#x3D;7;<br>a用到索引，b没有用，所以c是没有用到索引效果的（b没有使用到，所以索引达不到 c ，所以c未使用索引）</li><li>select * from myTest where a&#x3D;3 and b&gt;7 and c&#x3D;3; —- b范围值，断点，阻塞了c的索引<br>a用到了，b也用到了，c没有用到，这个地方b是范围值，也算断点，只不过自身用到了索引</li><li>select * from myTest where b&#x3D;3 and c&#x3D;4; — 联合索引必须按照顺序使用，并且需要全部使用<br>因为a索引没有使用，所以这里 bc都没有用上索引效果</li><li>select * from myTest where a&gt;4 and b&#x3D;7 and c&#x3D;9;<br>a用到了 b没有使用，c没有使用（a用了范围所以，相当于断点，之后的b，c都没有用到索引）</li><li>select * from myTest where a&#x3D;3 order by b;<br>a用到了索引，b在结果排序中也用到了索引的效果，a下面任意一段的b是排好序的</li><li>select * from myTest where a&#x3D;3 order by c;<br>a用到了索引，但是这个地方c没有发挥排序效果，因为中间断点了，使用 explain 可以看到 filesort<br>(9) select * from mytable where b&#x3D;3 order by a;<br>b没有用到索引，排序中a也没有发挥索引效果<br><strong>建议：</strong></li><li>对于单键索引，尽量选择针对当前query过滤性更好的索引</li><li>在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li><li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where子句中更多字段的索引</li><li>在选择组合索引的时候，尽量选择可以能够包含当前query中的where子句中更多字段的索引</li><li>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的</li></ul><p><strong>常见建索引问题</strong></p><ul><li>性别只有男女的情况，该字段是否建立索引?<br>区分度低，不需要建立索引</li><li>状态字段是否建立索引?<br>需要，区分度低的放在联合索引的后边</li></ul><h5 id="6-MySQL-中有哪几种锁？"><a href="#6-MySQL-中有哪几种锁？" class="headerlink" title="6. MySQL 中有哪几种锁？"></a>6. MySQL 中有哪几种锁？</h5><ul><li>表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</li><li>行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li>页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</li></ul><h5 id="7-简单说一说drop、delete与truncate的区别"><a href="#7-简单说一说drop、delete与truncate的区别" class="headerlink" title="7. 简单说一说drop、delete与truncate的区别"></a>7. 简单说一说drop、delete与truncate的区别</h5><ul><li>SQL中的drop、delete、truncate都表示删除，但是三者有一些差别</li><li>delete和truncate只删除表的数据不删除表的结构</li><li>速度,一般来说: drop&gt; truncate &gt;delete</li><li>delete语句是dml,这个操作会放到rollback segement中,事务提交之后才生效，如果有相应的trigger,执行的时候将被触发. truncate,drop是ddl, 操作立即生效,原数据不放到rollbacksegment中,不能回滚. 操作不触发trigger。</li></ul><h5 id="8-CHAR-和-VARCHAR-的区别？"><a href="#8-CHAR-和-VARCHAR-的区别？" class="headerlink" title="8. CHAR 和 VARCHAR 的区别？"></a>8. CHAR 和 VARCHAR 的区别？</h5><ul><li>CHAR 和 VARCHAR 类型在存储和检索方面有所不同</li><li>CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255 当 CHAR值被存储时，它们被用空格填充到特定长度，检索CHAR值时需删除尾随空格。</li></ul><h4 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h4><h5 id="1-和-的区别是什么"><a href="#1-和-的区别是什么" class="headerlink" title="1. #{}和${}的区别是什么"></a>1. #{}和${}的区别是什么</h5><p><code>#&#123;&#125;</code>是预编译处理，<code>$&#123;&#125;</code>是字符串替换。<br>Mybatis 在处理 <code>#&#123;&#125;</code>时，会将 sql 中的 <code>#&#123;&#125;</code>替换为?号，调用 PreparedStatement 的set 方法来赋值；<br>Mybatis 在处理 <code>$&#123;&#125;</code>时，就是把 <code>$&#123;&#125;</code>替换成变量的值。<br>使用 <code>#&#123;&#125;</code>可以有效的防止 SQL 注入，提高系统安全性。</p><h5 id="2-Mybatis-的一级、二级缓存"><a href="#2-Mybatis-的一级、二级缓存" class="headerlink" title="2. Mybatis 的一级、二级缓存"></a>2. Mybatis 的一级、二级缓存</h5><p><strong>一级缓存:</strong> 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为Session，当 Session ﬂush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓<br>存。<br><strong>二级缓存:</strong> 与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态),可在它的映射文件中配置  ；<br>对于缓存数据更新机制，当某一个作用域(一级缓存 Session&#x2F;二级缓存Namespaces)的进行了 C&#x2F;U&#x2F;D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><h5 id="1-如何确保消息正确地发送至-RabbitMQ？-如何确保消息接收方消费了消息？"><a href="#1-如何确保消息正确地发送至-RabbitMQ？-如何确保消息接收方消费了消息？" class="headerlink" title="1. 如何确保消息正确地发送至 RabbitMQ？  如何确保消息接收方消费了消息？"></a>1. 如何确保消息正确地发送至 RabbitMQ？  如何确保消息接收方消费了消息？</h5><p><strong>发送方确认模式</strong><br>将信道设置成 conﬁrm 模式（发送方确认模式），则所有在信道上发布的消息都会被指派一个唯一的 ID。一旦消息被投递到目的队列后，或者消息被写入磁盘后（可持久化的消息），信道会发送一个确认给生产者（包含消息唯一 ID）。如果 RabbitMQ 发生内部错误从而导致消息丢失，会发送一条 nack（notacknowledged，未确认）消息。发送方确认模式是异步的，生产者应用程序在等待确认的同时，可以继续发送消息。当确认消息到达生产者应用程序，生产者应用程序的回调方法就会被触发来处理确认消息。<br><strong>接收方消息确认机制</strong><br>消费者接收每一条消息后都必须进行确认（消息接收和消息确认是两个不同操作）。只有消费者确认了消息，RabbitMQ 才能安全地把消息从队列中删除。这里并没有用到超时机制，RabbitMQ 仅通过 Consumer 的连接中断来确认是否需要重新发送消息。也就是说，只要连接不中断RabbitMQ 给了 Consumer 足够长的时间来处理消息。保证数据的最终一致性。</p><h5 id="2-如何避免消息重复投递或重复消费"><a href="#2-如何避免消息重复投递或重复消费" class="headerlink" title="2. 如何避免消息重复投递或重复消费"></a>2. 如何避免消息重复投递或重复消费</h5><p>在消息<strong>生产</strong>时，MQ 内部针对每条生产者发送的消息生成一个 inner-msg-id，作为去重的依据（消息投递失败并重传），避免重复的消息进入队列。<br>在消息<strong>消费</strong>时，要求消息体中必须要有一个 bizId（对于同一业务全局唯一，如支付 ID、订单 ID、帖子 ID 等）作为去重的依据，避免同一条消息被重复消费。</p><h5 id="3-为什么要使用-rabbitmq"><a href="#3-为什么要使用-rabbitmq" class="headerlink" title="3. 为什么要使用 rabbitmq"></a>3. 为什么要使用 rabbitmq</h5><ul><li>在分布式系统下具备异步,削峰,负载均衡等一系列高级功能;</li><li>拥有持久化的机制，进程消息，队列中的信息也可以保存下来。</li><li>实现消费者和生产者之间的解耦。</li><li>对于高并发场景下，利用消息队列可以使得同步访问变为串行访问达到一定量的限流，利于数据库的操作。</li></ul><h5 id="4-如何确保消息不丢失？"><a href="#4-如何确保消息不丢失？" class="headerlink" title="4. 如何确保消息不丢失？"></a>4. 如何确保消息不丢失？</h5><p>消息持久化，当然前提是队列必须持久化<br>RabbitMQ 确保持久性消息能从服务器重启中恢复的方式是，将它们写入磁盘上的一个持久化日志文件，当发布一条持久性消息到持久交换器上时，Rabbit 会在消息提交到日志文件后才发送响应。一旦消费者从持久队列中消费了一条持久化消息，RabbitMQ 会在持久化日志中把这条消息标记为等待垃圾收集。如果持久化消息在被消费之前 RabbitMQ 重启，那么 Rabbit 会自动重建交换器和队列（以及绑定），并重新发布持久化日志文件中的消息到合适的队列。</p><h5 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h5><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><h5 id="1-开放封闭原则"><a href="#1-开放封闭原则" class="headerlink" title="1. 开放封闭原则"></a>1. 开放封闭原则</h5><ul><li>原理: 对于扩展是开放的，对于更改是关闭的</li><li>核心: 开放封闭原则是面向对象设计的核心所在，遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护，可扩展，可复用，灵活性好，开发人员应该仅对程序中所呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意的进行抽象同样不是一个好主意，拒绝不成熟的抽象和抽象本身一样重要！</li></ul><h5 id="2-高内聚低耦合"><a href="#2-高内聚低耦合" class="headerlink" title="2. 高内聚低耦合"></a>2. 高内聚低耦合</h5><ul><li>模块:<br>模块就是从逻辑上将系统分解为更细微的部分, 分而治之, 复杂问题拆解为若干简单问题, 逐个解决.<br>耦合主要描述模块之间的关系, 内聚主要描述模块内部. 模块的粒度可大可小, 可以是函数, 类, 功能块等等.</li><li>耦合<br>模块之间存在依赖, 导致改动可能会互相影响, 关系越紧密, 耦合越强, 模块独立性越差.<br>比如模块A直接操作了模块B中数据, 则视为强耦合, 若A只是通过数据与模块B交互, 则视为弱耦合.<br>独立的模块便于扩展, 维护, 写单元测试, 如果模块之间重重依赖, 会极大降低开发效率.</li><li>内聚<br>模块内部的元素, 关联性越强, 则内聚越高, 模块单一性更强. 一个模块应当尽可能独立完成某个功能<br>如果有各种场景需要被引入到当前模块, 代码质量将变得非常脆弱, 这种情况建议拆分为多个模块<br>低内聚的模块代码, 不管是维护, 扩展还是重构都相当麻烦, 难以下手</li></ul><h5 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3. 单例模式"></a>3. 单例模式</h5><p><strong>饿汉式(线程安全)</strong><br>在类加载时就完成了初始化，但是加载比较慢，获取对象比较快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>懒汉式(线程不安全)</strong><br>在类加载的时候不被初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>懒汉式(线程安全)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;  <br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>双检锁&#x2F;双重校验锁(DCL，即 double-checked locking)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;  <br>        <span class="hljs-keyword">synchronized</span> (Singleton.class) &#123;  <br>            <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;  <br>                singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> singleton;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>登记式&#x2F;静态内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();  <br>    &#125;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong><em>未完待续,欢迎大家及时补充</em></strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac上配置多个git账号</title>
    <link href="/2021/07/10/2021-07-10-Mac%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7/"/>
    <url>/2021/07/10/2021-07-10-Mac%E4%B8%8A%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="1、清空默认全局的username和email（如果没有的话可忽略）"><a href="#1、清空默认全局的username和email（如果没有的话可忽略）" class="headerlink" title="1、清空默认全局的username和email（如果没有的话可忽略）"></a>1、清空默认全局的username和email（如果没有的话可忽略）</h3><ul><li>查看已配置的git列表</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--list</span><br></code></pre></td></tr></table></figure><ul><li>清空默认的用户名和邮箱</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> user<span class="hljs-selector-class">.name</span><br>git config <span class="hljs-attr">--global</span> <span class="hljs-attr">--unset</span> user.email<br></code></pre></td></tr></table></figure><h3 id="2、给不同的git账户生成ssh-key：比方说一个公司账号，一个个人账号"><a href="#2、给不同的git账户生成ssh-key：比方说一个公司账号，一个个人账号" class="headerlink" title="2、给不同的git账户生成ssh-key：比方说一个公司账号，一个个人账号"></a>2、给不同的git账户生成ssh-key：比方说一个公司账号，一个个人账号</h3><ul><li>git生成ssh-key，默认如果不设置名字的话就是id_rsa</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//输入后按enter键</span><br>ssh<span class="hljs-punctuation">-</span>keygen <span class="hljs-punctuation">-</span>t rsa <span class="hljs-punctuation">-</span>C <span class="hljs-string">&quot;xxx@126.com&quot;</span><br></code></pre></td></tr></table></figure><p>如有以下内容输出,则意味着生成密钥成功</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/james/.ssh/id_rsa):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /Users/james/.ssh/id_rsa.<br>Your public key has been saved in /Users/james/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:rwtxjGTJPoV9Mg8lFSf8D4X6jFexWVXKOMRaVyo+RO8 13163162001<span class="hljs-meta">@126.com</span><br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|<span class="hljs-string">        .o=o+. .*</span>|<br>|<span class="hljs-string">     . + o.=+++o.</span>|<br>|<span class="hljs-string">      * * .==o== </span>|<br>|<span class="hljs-string">     + + *ooo++  </span>|<br>|<span class="hljs-string">      = S .+o+E  </span>|<br>|<span class="hljs-string">       + .. +..  </span>|<br>|<span class="hljs-string">      .   ..     </span>|<br>|<span class="hljs-string">       . .       </span>|<br>|<span class="hljs-string">        o.       </span>|<br>+----[SHA256]-----+<br></code></pre></td></tr></table></figure><ul><li>自己的git生成ssh-key，设置路径成<a href="mailto:&#x69;&#100;&#x5f;&#x72;&#115;&#97;&#95;&#120;&#x78;&#120;&#x40;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#x69;&#100;&#x5f;&#x72;&#115;&#97;&#95;&#120;&#x78;&#120;&#x40;&#103;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a>，和之前生成的那个区分开来</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span>输入自定义的rsa名字到自己的邮箱上去<br>ssh-keygen -t rsa -f ~<span class="hljs-string">/.ssh/id_rsa_xxx</span>@gmail.com -C <span class="hljs-string">&quot;xxx@gmail.com&quot;</span><br><span class="hljs-string">//</span>后面的一样的<span class="hljs-string">...</span><br></code></pre></td></tr></table></figure><h3 id="3、给他们分别添加到ssh-agent信任列表"><a href="#3、给他们分别添加到ssh-agent信任列表" class="headerlink" title="3、给他们分别添加到ssh-agent信任列表"></a>3、给他们分别添加到ssh-agent信任列表</h3><ul><li>添加到信任列表</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">ssh-<span class="hljs-keyword">add</span><span class="language-bash"> ~/.ssh/id_rsa</span><br></code></pre></td></tr></table></figure><ul><li>这里可能会遇到Error比如</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Could <span class="hljs-keyword">not</span> <span class="hljs-built_in">open</span> <span class="hljs-keyword">a</span> connection <span class="hljs-built_in">to</span> your authentication agent.<br></code></pre></td></tr></table></figure><ul><li>那么请先输入</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-agent bash</span><br></code></pre></td></tr></table></figure><ul><li>重复 3.1操作，返回Identity added就是成功了</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br><span class="hljs-comment">//返回这个就表示添加成功了</span><br>Identitiy added: ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br></code></pre></td></tr></table></figure><ul><li>再次添加另一个到信任列表</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript">ssh-add ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_xxx<span class="hljs-meta">@gmail</span>.<span class="hljs-property">com</span><br><span class="hljs-comment">//返回这个就表示添加成功了</span><br><span class="hljs-title class_">Identitiy</span> <span class="hljs-attr">added</span>: ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_xxx<span class="hljs-meta">@gmail</span>.<span class="hljs-property">com</span><br></code></pre></td></tr></table></figure><h3 id="4、添加公钥到git账户中"><a href="#4、添加公钥到git账户中" class="headerlink" title="4、添加公钥到git账户中"></a>4、添加公钥到git账户中</h3><ul><li>复制公钥，然后粘贴到git网站的公钥中去</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">pbcopy &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br><span class="hljs-regexp">//</span>pbcopy &lt; ~<span class="hljs-regexp">/.ssh/i</span>d_rsa_xxx@gmail.com.pub<br></code></pre></td></tr></table></figure><h3 id="5、在config文件配置多个ssh-key"><a href="#5、在config文件配置多个ssh-key" class="headerlink" title="5、在config文件配置多个ssh-key"></a>5、在config文件配置多个ssh-key</h3><ul><li>5.1、打开目录，看看有没有config文件，没有的话新建一个</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">open</span> ~<span class="hljs-regexp">/.ssh/</span><br></code></pre></td></tr></table></figure><ul><li>5.2、分别配置公司和自己的ssh-key</li></ul><table><thead><tr><th>键</th><th>值</th><th>规则</th></tr></thead><tbody><tr><td>Host</td><td>主机</td><td>随意写，有点关联就行了</td></tr><tr><td>Hostname</td><td>主机名</td><td>必须写正确，是你的git公有地址，比方说码云：gitee.com</td></tr><tr><td>IdentityFile</td><td>身份文件</td><td>你的rsa具体路径地址</td></tr><tr><td>User</td><td>用户</td><td>可随意写，建议使用Host的前面部分，后面具体clone操作都会用到这个user</td></tr></tbody></table><p>config文件内容如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#gmail</span><br>Host gmail<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>Hostname github<span class="hljs-selector-class">.com</span><br>IdentityFile ~/.ssh/id_rsa_xxx@gmail<span class="hljs-selector-class">.com</span><br>User gmail<br>  <br><span class="hljs-number">#126</span><br>Host <span class="hljs-number">126</span><span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span><br>Hostname github<span class="hljs-selector-class">.com</span><br>IdentityFile ~/.ssh/id_rsa_xxx@<span class="hljs-number">126</span><span class="hljs-selector-class">.com</span><br>User <span class="hljs-number">126</span><br></code></pre></td></tr></table></figure><h3 id="6、测试连接"><a href="#6、测试连接" class="headerlink" title="6、测试连接"></a>6、测试连接</h3><ul><li>测试公司git账户连接：如果单个账户情况一般就是ssh -T git@xxx，如果配置了config，那么可以这样测试：ssh -T git@{config里面的user}.xxx主机名</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@gmail</span>.github.com<br></code></pre></td></tr></table></figure><ul><li>连接成功</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Hi xxx！ You&#x27;ve successfully authenticated.<span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell acess<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081606196.png" alt="截屏2021-11-10 19.49.24"></p><ul><li>测试自己的，并连接成功</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">ssh -T git@<span class="hljs-number">126.</span>gitee.com<br>Hi xxx！ You&#x27;ve successfully authenticated.<span class="hljs-keyword">but</span> GitHub.COM <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell acess<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081606709.png" alt="截屏2021-11-10 19.48.17"></p><p>到这一步为止，基本上后面能欢快的玩耍了</p><h3 id="7、clone-and-push"><a href="#7、clone-and-push" class="headerlink" title="7、clone and push"></a>7、clone and push</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//到自己工作的目录，准备下载个工程下来</span><br>cd ~/james/demo/<br>  <br><span class="hljs-comment">//原本单个账户的情况</span><br>git clone git@github<span class="hljs-selector-class">.com</span>:xxx/TestAndroid<span class="hljs-selector-class">.git</span><br><br><span class="hljs-comment">//设置多个账户和config后</span><br>git clone git@gmail<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.com</span>:xxx/demo<span class="hljs-selector-class">.git</span><br><br><span class="hljs-comment">//.....done</span><br><span class="hljs-comment">//前往具体的工程目录</span><br>cd demo<br><span class="hljs-comment">//添加、提交，push等~~~</span><br>git add .<br>git pull<br>git commit -m <span class="hljs-string">&quot;test commit&quot;</span><br>git push<br><span class="hljs-comment">//OK啦</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ报错- sendDefaultImpl call timeout</title>
    <link href="/2021/07/06/2021-07-06-RocketMQ%E6%8A%A5%E9%94%99-%20sendDefaultImpl%20call%20timeout/"/>
    <url>/2021/07/06/2021-07-06-RocketMQ%E6%8A%A5%E9%94%99-%20sendDefaultImpl%20call%20timeout/</url>
    
    <content type="html"><![CDATA[<blockquote><p>springboot发送mq消息报错org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</p></blockquote><p>可能原因一：端口未开放</p><p>可能原因二：broker已经启动成功，可能注册的ip有误</p><p>针对原因二可用以下方法解决</p><ol><li>编辑broker.conf,添加如下行</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">brokerIP1</span><span class="hljs-operator">=</span>服务器ip<br></code></pre></td></tr></table></figure><ol start="2"><li>启动broker,通过-c加载自定义配置文件</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nohup</span> sh bin/mqbroker -n xx.xx.xx.xx:<span class="hljs-number">9876</span> -c /rocketmq-<span class="hljs-number">4</span>.<span class="hljs-number">9</span>.<span class="hljs-number">3</span>/conf/broker.conf &amp;<br></code></pre></td></tr></table></figure><p>重启broker后，再次连接rocketmq，程序已经能正常连接了。</p>]]></content>
    
    
    <categories>
      
      <category>RocketMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>听说辰哥还不会调试RocketMQ源码?今晚不睡也得让辰哥学会</title>
    <link href="/2021/07/03/2021-07-03-%E5%90%AC%E8%AF%B4%E8%BE%B0%E5%93%A5%E8%BF%98%E4%B8%8D%E4%BC%9A%E8%B0%83%E8%AF%95RocketMQ%E6%BA%90%E7%A0%81?%E4%BB%8A%E6%99%9A%E4%B8%8D%E7%9D%A1%E4%B9%9F%E5%BE%97%E8%AE%A9%E8%BE%B0%E5%93%A5%E5%AD%A6%E4%BC%9A/"/>
    <url>/2021/07/03/2021-07-03-%E5%90%AC%E8%AF%B4%E8%BE%B0%E5%93%A5%E8%BF%98%E4%B8%8D%E4%BC%9A%E8%B0%83%E8%AF%95RocketMQ%E6%BA%90%E7%A0%81?%E4%BB%8A%E6%99%9A%E4%B8%8D%E7%9D%A1%E4%B9%9F%E5%BE%97%E8%AE%A9%E8%BE%B0%E5%93%A5%E5%AD%A6%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h4 id="1-获取RocketMQ源码"><a href="#1-获取RocketMQ源码" class="headerlink" title="1. 获取RocketMQ源码"></a>1. 获取RocketMQ源码</h4><p>RocketMQ原先是阿里巴巴内部使用的消息中间件,于2017年提交到Apache基金会成为Apache基金会的顶级开源项目,GitHub代码库链接:<a href="https://github.com/apache/rocketmq.git">https://github.com/apache/rocketmq.git</a>.在Github网站上搜索RocketMQ,如图所示.</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081429568.png" alt="截屏2021-11-02 21.56.03"></p><blockquote><p>克隆源码,命令如下</p></blockquote><p>git clone <a href="https://github.com/apache/rocketmq.git">https://github.com/apache/rocketmq.git</a></p><blockquote><p>克隆完成后,在IntelliJ IDEA打开</p></blockquote><p>导入成功后,效果如图所示</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081429519.png" alt="截屏2021-11-02 22.52.00"></p><blockquote><p>执行maven clean install 进行编译和下载依赖</p></blockquote><p>下载完成后,控制台提示BUILD SUCCESS信息</p><h4 id="2-在IntelliJ-IDEA调试RocketMQ源码"><a href="#2-在IntelliJ-IDEA调试RocketMQ源码" class="headerlink" title="2. 在IntelliJ IDEA调试RocketMQ源码"></a>2. 在IntelliJ IDEA调试RocketMQ源码</h4><h5 id="1-启动NameServer"><a href="#1-启动NameServer" class="headerlink" title="(1) 启动NameServer"></a>(1) 启动NameServer</h5><ul><li>展开namesrc模块,右键NamesrvStartup.java,移动到Debug As,选中Debug ‘NamesrvStartup.java.main()’</li><li>点击Environment variables后面的按钮,弹出Environment variables对话框</li><li>点击+号,在Name输入框中输入ROCKETMQ_HOME,Value输入源码的保存路径,点击OK即可</li><li>在RocketMQ运行主目录创建conf、logs、store三个文件夹</li><li>在RocketMQ distribution部署目录中将broker.conf、logback_broker.xml文件复制到conf目录中,logback_namesrv.xml文件,只需修改日志文件的目录,brocker.conf文件目录内容代码如下所示</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">brokerClusterName</span> = DefaultCluster<br><span class="hljs-attr">brokerName</span> = broker-a<br><span class="hljs-attr">brokerId</span> = <span class="hljs-number">0</span><br><span class="hljs-comment">#nameServer地址，分号分割</span><br><span class="hljs-attr">namesrvAddr</span>=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9876</span><br><span class="hljs-attr">deleteWhen</span> = <span class="hljs-number">04</span><br><span class="hljs-attr">fileReservedTime</span> = <span class="hljs-number">48</span><br><span class="hljs-attr">brokerRole</span> = ASYNC_MASTER<br><span class="hljs-attr">flushDiskType</span> = ASYNC_FLUSH<br><br><span class="hljs-comment"># 存储路径</span><br><span class="hljs-attr">storePathRootDir</span>=/rocketmq/store<br><span class="hljs-comment"># commitLog 存储路径</span><br><span class="hljs-attr">storePathCommitLog</span>=/rocketmq/store/commitLog<br><span class="hljs-comment"># 消费队列存储路径</span><br><span class="hljs-attr">storePathConsumeQueue</span>=/rocketmq/store/consumequeue<br><span class="hljs-comment"># 消息索引存储路径</span><br><span class="hljs-attr">storePathIndex</span>=/rocketmq/store/index<br><span class="hljs-comment"># checkpoint 文件存储路径</span><br><span class="hljs-attr">storeCheckpoint</span>=/rocketmq/store/checkpoint<br><span class="hljs-comment"># abort 文件存储路径</span><br><span class="hljs-attr">abortFile</span>=/rocketmq/store/abort<br></code></pre></td></tr></table></figure><ul><li>在IntelliJ IDEA Debug中运行NamesrvStartup,并输出“The Name Server boot success.Serializetype&#x3D;JSON”</li></ul><h5 id="2-启动Broker"><a href="#2-启动Broker" class="headerlink" title="(2) 启动Broker"></a>(2) 启动Broker</h5><ul><li><p>展开broker模块，右键BrokerStartup.java执行，会提示需要配置ROCKETMQ_HOME。在idea右上角选中Debug Configurations,</p><p>在弹出的对话框中选择arguments选项，配置-c属性指定broker配置文件路径</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081429973.png" alt="截屏2021-11-03 00.31.54"></p></li><li><p>切换选项卡Environment，配置ROCKETMQ_HOME主目录和broker配置文件</p></li></ul><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081429089.png" alt="截屏2021-11-03 00.33.25"></p><ul><li>以debug模式运行BrokerStartup.java，查看${ROCKETMQ_HOME}&#x2F;logs&#x2F;broker.log文件，未报错则表示启动成功</li></ul><h5 id="3-使用RocketMQ提供的实例验证消息发送与消息消费"><a href="#3-使用RocketMQ提供的实例验证消息发送与消息消费" class="headerlink" title="(3) 使用RocketMQ提供的实例验证消息发送与消息消费"></a>(3) 使用RocketMQ提供的实例验证消息发送与消息消费</h5><ul><li>修改org.apache.rocketmq.example.quickstart.Producer示例程序，设置消息生产者NameServer地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"> * contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"> * this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"> * the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.apache.rocketmq.example.quickstart;<br><br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.producer.SendResult;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.message.Message;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This class demonstrates how to send messages to brokers using provided &#123;<span class="hljs-doctag">@link</span> DefaultMQProducer&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> MQClientException, InterruptedException &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Instantiate with a producer group name.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(<span class="hljs-string">&quot;please_rename_unique_group_name&quot;</span>);<br>        <br>        producer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Specify name server addresses.</span><br><span class="hljs-comment">         * &lt;p/&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * Alternatively, you may specify name server addresses via exporting environmental variable: NAMESRV_ADDR</span><br><span class="hljs-comment">         * &lt;pre&gt;</span><br><span class="hljs-comment">         * &#123;@code</span><br><span class="hljs-comment">         * producer.setNamesrvAddr(&quot;name-server1-ip:9876;name-server2-ip:9876&quot;);</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         * &lt;/pre&gt;</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Launch the instance.</span><br><span class="hljs-comment">         */</span><br>        producer.start();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * Create a message instance, specifying topic, tag and message body.</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;TopicTest&quot;</span> <span class="hljs-comment">/* Topic */</span>,<br>                    <span class="hljs-string">&quot;TagA&quot;</span> <span class="hljs-comment">/* Tag */</span>,<br>                    (<span class="hljs-string">&quot;Hello RocketMQ &quot;</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="hljs-comment">/* Message body */</span><br>                );<br><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * Call send message to deliver message to one of brokers.</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> producer.send(msg);<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * There are different ways to send message, if you don&#x27;t care about the send result,you can use this way</span><br><span class="hljs-comment">                 * &#123;@code</span><br><span class="hljs-comment">                 * producer.sendOneway(msg);</span><br><span class="hljs-comment">                 * &#125;</span><br><span class="hljs-comment">                 */</span><br><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * if you want to get the send result in a synchronize way, you can use this send method</span><br><span class="hljs-comment">                 * &#123;@code</span><br><span class="hljs-comment">                 * SendResult sendResult = producer.send(msg);</span><br><span class="hljs-comment">                 * System.out.printf(&quot;%s%n&quot;, sendResult);</span><br><span class="hljs-comment">                 * &#125;</span><br><span class="hljs-comment">                 */</span><br><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * if you want to get the send result in a asynchronize way, you can use this send method</span><br><span class="hljs-comment">                 * &#123;@code</span><br><span class="hljs-comment">                 *</span><br><span class="hljs-comment">                 *  producer.send(msg, new SendCallback() &#123;</span><br><span class="hljs-comment">                 *  @Override</span><br><span class="hljs-comment">                 *  public void onSuccess(SendResult sendResult) &#123;</span><br><span class="hljs-comment">                 *      // do something</span><br><span class="hljs-comment">                 *  &#125;</span><br><span class="hljs-comment">                 *</span><br><span class="hljs-comment">                 *  @Override</span><br><span class="hljs-comment">                 *  public void onException(Throwable e) &#123;</span><br><span class="hljs-comment">                 *      // do something</span><br><span class="hljs-comment">                 *  &#125;</span><br><span class="hljs-comment">                 *&#125;);</span><br><span class="hljs-comment">                 *</span><br><span class="hljs-comment">                 *&#125;</span><br><span class="hljs-comment">                 */</span><br><br>                System.out.printf(<span class="hljs-string">&quot;%s%n&quot;</span>, sendResult);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Shut down once the producer instance is not longer in use.</span><br><span class="hljs-comment">         */</span><br>        producer.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行示例程序，查看运行结果，如有输出sendStatus&#x3D;SEND_OK则表示消息发送成功</li><li>修改org.apache.rocketmq.example.quickstart.Consumer示例程序，设置消息消费者NameServer地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="hljs-comment"> * contributor license agreements.  See the NOTICE file distributed with</span><br><span class="hljs-comment"> * this work for additional information regarding copyright ownership.</span><br><span class="hljs-comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="hljs-comment"> * (the &quot;License&quot;); you may not use this file except in compliance with</span><br><span class="hljs-comment"> * the License.  You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> * See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> * limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.apache.rocketmq.example.quickstart;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.message.MessageExt;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This example shows how to subscribe and consume messages using providing &#123;<span class="hljs-doctag">@link</span> DefaultMQPushConsumer&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException, MQClientException &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Instantiate with specified consumer group name.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(<span class="hljs-string">&quot;please_rename_unique_group_name_4&quot;</span>);<br>        consumer.setNamesrvAddr(<span class="hljs-string">&quot;127.0.0.1:9876&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Specify name server addresses.</span><br><span class="hljs-comment">         * &lt;p/&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * Alternatively, you may specify name server addresses via exporting environmental variable: NAMESRV_ADDR</span><br><span class="hljs-comment">         * &lt;pre&gt;</span><br><span class="hljs-comment">         * &#123;@code</span><br><span class="hljs-comment">         * consumer.setNamesrvAddr(&quot;name-server1-ip:9876;name-server2-ip:9876&quot;);</span><br><span class="hljs-comment">         * &#125;</span><br><span class="hljs-comment">         * &lt;/pre&gt;</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Specify where to start in case the specified consumer group is a brand new one.</span><br><span class="hljs-comment">         */</span><br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Subscribe one more more topics to consume.</span><br><span class="hljs-comment">         */</span><br>        consumer.subscribe(<span class="hljs-string">&quot;TopicTest&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         *  Register callback to execute on arrival of messages fetched from brokers.</span><br><span class="hljs-comment">         */</span><br>        consumer.registerMessageListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListenerConcurrently</span>() &#123;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgs,</span><br><span class="hljs-params">                ConsumeConcurrentlyContext context)</span> &#123;<br>                System.out.printf(<span class="hljs-string">&quot;%s Receive New Messages: %s %n&quot;</span>, Thread.currentThread().getName(), msgs);<br>                <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         *  Launch the consumer instance.</span><br><span class="hljs-comment">         */</span><br>        consumer.start();<br><br>        System.out.printf(<span class="hljs-string">&quot;Consumer Started.%n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>运行消费者程序</li></ul><p>消息发送与消息消费都成功，则说明RocketMQ调试环境已成功搭建，可以通过Debug调试源码，探索RocketMQ的奥秘了。</p>]]></content>
    
    
    <categories>
      
      <category>RocketMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你的项目是时候集成RocketMQ了</title>
    <link href="/2021/07/02/2021-07-02-%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%98%AF%E6%97%B6%E5%80%99%E9%9B%86%E6%88%90RocketMQ%E4%BA%86/"/>
    <url>/2021/07/02/2021-07-02-%E4%BD%A0%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%98%AF%E6%97%B6%E5%80%99%E9%9B%86%E6%88%90RocketMQ%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1-RocketMQ介绍"><a href="#1-RocketMQ介绍" class="headerlink" title="1. RocketMQ介绍"></a>1. RocketMQ介绍</h4><p>  rocketmq是阿里巴巴开源的一款分布式的消息中间件，他源于jms规范但是不遵守jms规范。对于分布式只一点，如果你了用过其他mq并且了解过rocketmq，就知道rocketmq天生就是分布式的，可以说是broker、provider、consumer等各种分布式</p><h4 id="2-RocketMQ优点"><a href="#2-RocketMQ优点" class="headerlink" title="2. RocketMQ优点"></a>2. RocketMQ优点</h4><ul><li><p>去除对zk的依赖</p></li><li><p>支持异步和同步两种方式刷磁盘</p></li><li><p>单机支持的队列或者topic数量是5w</p></li><li><p>支持消息重试</p></li><li><p>支持严格按照一定的顺序发送消息</p></li><li><p>支持定时发送消息</p></li><li><p>支持根据消息ID来进行查询</p></li><li><p>支持根据某个时间点进行消息的回溯</p></li><li><p>支持对消息服务端的过滤</p></li><li><p>消费并行度:顺序消费 取决于queue数量,乱序消费 取决于consumer数量</p></li></ul><h4 id="3-RocketMQ发送消息和消费消息"><a href="#3-RocketMQ发送消息和消费消息" class="headerlink" title="3. RocketMQ发送消息和消费消息"></a>3. RocketMQ发送消息和消费消息</h4><h5 id="1-创建父工程"><a href="#1-创建父工程" class="headerlink" title="(1) 创建父工程"></a>(1) 创建父工程</h5><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081427051.png"></p><p><em><strong>pom.xml如下</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;<br>    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;<br><br>    &lt;groupId&gt;com.james&lt;/groupId&gt;<br>    &lt;artifactId&gt;rocketmq-demo&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br><br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br>    &lt;modules&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;MQProducer-demo&lt;/<span class="hljs-keyword">module</span>&gt;<br>        &lt;<span class="hljs-keyword">module</span>&gt;MQConsume-demo&lt;/<span class="hljs-keyword">module</span>&gt;<br>    &lt;/modules&gt;<br><br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;<br>    &lt;/properties&gt;<br><br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;com.james&lt;/groupId&gt;<br>                &lt;artifactId&gt;common_utils&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">0.0</span><span class="hljs-number">.3</span>-SNAPSHOT&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>            &lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client --&gt;</span><br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;<br>                &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">4.9</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>                &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>                &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.22</span>&lt;/version&gt;<br>            &lt;/dependency&gt;<br><br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br><br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;!--该配置必须 --&gt;<br>                    &lt;fork&gt;<span class="hljs-literal">true</span>&lt;/fork&gt;<br>                &lt;/configuration&gt;<br>                &lt;executions&gt;<br>                    &lt;execution&gt;<br>                        &lt;goals&gt;<br>                            &lt;goal&gt;repackage&lt;/goal&gt;<br>                        &lt;/goals&gt;<br>                    &lt;/execution&gt;<br>                &lt;/executions&gt;<br>            &lt;/plugin&gt;<br><br>        &lt;/plugins&gt;<br><br>    &lt;/build&gt;<br><br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h5 id="2-创建消息生产者"><a href="#2-创建消息生产者" class="headerlink" title="(2) 创建消息生产者"></a>(2) 创建消息生产者</h5><p><em><strong>新建工程MQProducer-demo</strong></em></p><p>pom.xml如下所示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.james<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MQProducer-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.james<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>修改application.properties文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8082</span><br><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">producer-demo</span><br><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-attr">spring.redis.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">10</span><br><br><span class="hljs-attr">swagger.enable</span>=<span class="hljs-string">true</span><br><br><span class="hljs-attr">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-attr">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><br><br><span class="hljs-attr">rocketmq.name-server</span>=<span class="hljs-string">localhost:9876</span><br><span class="hljs-attr">rocketmq.producer.group</span>=<span class="hljs-string">2021-11</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 是否开启自动配置</span><br><span class="hljs-attr">rocketmq.producer.isOnOff</span>=<span class="hljs-string">on</span><br><span class="hljs-comment"># 发送同一类消息设置为同一个group，保证唯一默认不需要设置，rocketmq会使用ip@pid（pid代表jvm名字）作为唯一标识</span><br><span class="hljs-attr">rocketmq.producer.groupName</span>=<span class="hljs-string">$&#123;spring.application.name&#125;</span><br><span class="hljs-comment"># mq的nameserver地址</span><br><span class="hljs-attr">rocketmq.producer.namesrvAddr</span>=<span class="hljs-string">localhost:9876</span><br><span class="hljs-comment"># 消息最大长度 默认 1024 * 4 (4M)</span><br><span class="hljs-attr">rocketmq.producer.maxMessageSize</span> = <span class="hljs-string">4096</span><br><span class="hljs-comment"># 发送消息超时时间，默认 3000</span><br><span class="hljs-attr">rocketmq.producer.sendMsgTimeOut</span>=<span class="hljs-string">3000</span><br><span class="hljs-comment"># 发送消息失败重试次数，默认2</span><br><span class="hljs-attr">rocketmq.producer.retryTimesWhenSendFailed</span>=<span class="hljs-string">2</span><br><br></code></pre></td></tr></table></figure><p><em><strong>新建消息生产者配置类</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.mq.producer.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消息生产者配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/30 11:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;rocketmq.producer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MQProducerConfigure</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MQProducerConfigure.class);<br><br>    <span class="hljs-keyword">private</span> String groupName;<br>    <span class="hljs-keyword">private</span> String namesrvAddr;<br>    <span class="hljs-comment">// 消息最大值</span><br>    <span class="hljs-keyword">private</span> Integer maxMessageSize;<br>    <span class="hljs-comment">// 消息发送超时时间</span><br>    <span class="hljs-keyword">private</span> Integer sendMsgTimeOut;<br>    <span class="hljs-comment">// 失败重试次数</span><br>    <span class="hljs-keyword">private</span> Integer retryTimesWhenSendFailed;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mq 生成者配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> MQClientException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;rocketmq.producer&quot;, value = &quot;isOnOff&quot;, havingValue = &quot;on&quot;)</span><br>    <span class="hljs-keyword">public</span> DefaultMQProducer <span class="hljs-title function_">defaultProducer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;defaultProducer 正在创建---------------------------------------&quot;</span>);<br>        <span class="hljs-type">DefaultMQProducer</span> <span class="hljs-variable">producer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQProducer</span>(groupName);<br>        producer.setNamesrvAddr(namesrvAddr);<br>        producer.setVipChannelEnabled(<span class="hljs-literal">false</span>);<br>        producer.setMaxMessageSize(maxMessageSize);<br>        producer.setSendMsgTimeout(sendMsgTimeOut);<br>        producer.setRetryTimesWhenSendAsyncFailed(retryTimesWhenSendFailed);<br>        producer.start();<br>        LOGGER.info(<span class="hljs-string">&quot;rocketmq producer server 开启成功----------------------------------&quot;</span>);<br>        <span class="hljs-keyword">return</span> producer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>新建消息生产者接口</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.mq.producer.controller;<br><br><span class="hljs-keyword">import</span> com.james.common.result.Result;<br><span class="hljs-keyword">import</span> com.james.common.utils.StringUtils;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQBrokerException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.producer.SendResult;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.message.Message;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.remoting.exception.RemotingException;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消息生产者</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/30 11:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerController</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(ProducerController.class);<br><br>    <span class="hljs-meta">@Autowired</span><br>    DefaultMQProducer defaultMQProducer;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送简单的MQ消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/send&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">send</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException, RemotingException, MQClientException, MQBrokerException &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(msg)) &#123;<br>            <span class="hljs-keyword">return</span> Result.OK();<br>        &#125;<br>        LOGGER.info(<span class="hljs-string">&quot;发送MQ消息内容：&quot;</span> + msg);<br>        <span class="hljs-type">Message</span> <span class="hljs-variable">sendMsg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;HelloTopic&quot;</span>, <span class="hljs-string">&quot;HelloTag&quot;</span>, msg.getBytes());<br>        <span class="hljs-comment">// 默认3秒超时</span><br>        <span class="hljs-type">SendResult</span> <span class="hljs-variable">sendResult</span> <span class="hljs-operator">=</span> defaultMQProducer.send(sendMsg);<br>        LOGGER.info(<span class="hljs-string">&quot;消息发送响应：&quot;</span> + sendResult.toString());<br>        <span class="hljs-keyword">return</span> Result.OK(sendResult);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>测试</strong></em></p><p>生产者控制台发送消息:</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081427440.png" alt="截屏2021-10-31 00.20.55"></p><h5 id="3-创建消息消费者"><a href="#3-创建消息消费者" class="headerlink" title="(3) 创建消息消费者"></a>(3) 创建消息消费者</h5><p>pom.xml同消息生成者模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.james<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>MQConsume-demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.james<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common_utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-client --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.rocketmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rocketmq-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><em><strong>修改配置文件</strong></em></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">consumers-demo</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8801</span><br><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">localhost</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-attr">spring.redis.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">10</span><br><br><span class="hljs-attr">swagger.enable</span>=<span class="hljs-string">true</span><br><br><span class="hljs-attr">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><span class="hljs-attr">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 是否开启自动配置</span><br><span class="hljs-attr">rocketmq.consumer.isOnOff</span>=<span class="hljs-string">on</span><br><span class="hljs-comment"># 发送同一类消息设置为同一个group，保证唯一默认不需要设置，rocketmq会使用ip@pid（pid代表jvm名字）作为唯一标识</span><br><span class="hljs-attr">rocketmq.consumer.groupName</span>=<span class="hljs-string">$&#123;spring.application.name&#125;</span><br><span class="hljs-comment"># mq的nameserver地址</span><br><span class="hljs-attr">rocketmq.consumer.namesrvAddr</span>=<span class="hljs-string">127.0.0.1:9876</span><br><span class="hljs-comment"># 消费者订阅的主题topic和tags（*标识订阅该主题下所有的tags），格式: topic~tag1||tag2||tags3;</span><br><span class="hljs-attr">rocketmq.consumer.topics</span>=<span class="hljs-string">TestTopic~TestTag;TestTopic~HelloTag;HelloTopic~HelloTag;MyTopic~*</span><br><span class="hljs-comment"># 消费者线程数据量</span><br><span class="hljs-attr">rocketmq.consumer.consumeThreadMin</span>=<span class="hljs-string">5</span><br><span class="hljs-attr">rocketmq.consumer.consumeThreadMax</span>=<span class="hljs-string">32</span><br><span class="hljs-comment"># 设置一次消费信心的条数，默认1</span><br><span class="hljs-attr">rocketmq.consumer.consumeMessageBatchMaxSize</span>=<span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><p><strong>mq消费者配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.mq.consume.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.consumer.ConsumeFromWhere;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: mq消费者配置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/30 17:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;rocketmq.consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MQConsumerConfigure</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MQConsumerConfigure.class);<br><br>    <span class="hljs-keyword">private</span> String groupName;<br>    <span class="hljs-keyword">private</span> String namesrvAddr;<br>    <span class="hljs-keyword">private</span> String topics;<br>    <span class="hljs-comment">// 消费者线程数据量</span><br>    <span class="hljs-keyword">private</span> Integer consumeThreadMin;<br>    <span class="hljs-keyword">private</span> Integer consumeThreadMax;<br>    <span class="hljs-keyword">private</span> Integer consumeMessageBatchMaxSize;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MQConsumeMsgListenerProcessor consumeMsgListenerProcessor;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * mq 消费者配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> MQClientException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;rocketmq.consumer&quot;, value = &quot;isOnOff&quot;, havingValue = &quot;on&quot;)</span><br>    <span class="hljs-keyword">public</span> DefaultMQPushConsumer <span class="hljs-title function_">defaultConsumer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MQClientException &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;defaultConsumer 正在创建---------------------------------------&quot;</span>);<br>        <span class="hljs-type">DefaultMQPushConsumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMQPushConsumer</span>(groupName);<br>        consumer.setNamesrvAddr(namesrvAddr);<br>        consumer.setConsumeThreadMin(consumeThreadMin);<br>        consumer.setConsumeThreadMax(consumeThreadMax);<br>        consumer.setConsumeMessageBatchMaxSize(consumeMessageBatchMaxSize);<br>        <span class="hljs-comment">// 设置监听</span><br>        consumer.registerMessageListener(consumeMsgListenerProcessor);<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置consumer第一次启动是从队列头部开始还是队列尾部开始</span><br><span class="hljs-comment">         * 如果不是第一次启动，那么按照上次消费的位置继续消费</span><br><span class="hljs-comment">         */</span><br>        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 设置消费模型，集群还是广播，默认为集群</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//        consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 设置该消费者订阅的主题和tag，如果订阅该主题下的所有tag，则使用*,</span><br>            String[] topicArr = topics.split(<span class="hljs-string">&quot;;&quot;</span>);<br>            <span class="hljs-keyword">for</span> (String topic : topicArr) &#123;<br>                String[] tagArr = topic.split(<span class="hljs-string">&quot;~&quot;</span>);<br>                consumer.subscribe(tagArr[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            consumer.start();<br>            LOGGER.info(<span class="hljs-string">&quot;consumer 创建成功 groupName=&#123;&#125;, topics=&#123;&#125;, namesrvAddr=&#123;&#125;&quot;</span>,groupName,topics,namesrvAddr);<br>        &#125; <span class="hljs-keyword">catch</span> (MQClientException e) &#123;<br>            LOGGER.error(<span class="hljs-string">&quot;consumer 创建失败!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> consumer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个只是初始化操作，实际对消费者对消息处理放在 consumer.registerMessageListener(consumeMsgListenerProcessor); 这个监听类里面了，实际接收消息，处理消息都放在监听类里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.mq.consume.config;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.CollectionUtils;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;<br><span class="hljs-keyword">import</span> org.apache.rocketmq.common.message.MessageExt;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 消费者监听</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/30 17:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MQConsumeMsgListenerProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MessageListenerConcurrently</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(MQConsumeMsgListenerProcessor.class);<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认msg里只有一条消息，可以通过设置consumeMessageBatchMaxSize参数来批量接收消息</span><br><span class="hljs-comment">     * 不要抛异常，如果没有return CONSUME_SUCCESS ，consumer会重新消费该消息，直到return CONSUME_SUCCESS</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msgList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> consumeConcurrentlyContext</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ConsumeConcurrentlyStatus <span class="hljs-title function_">consumeMessage</span><span class="hljs-params">(List&lt;MessageExt&gt; msgList, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> &#123;<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(msgList)) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;MQ接收消息为空，直接返回成功&quot;</span>);<br>            <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>        &#125;<br>        <span class="hljs-type">MessageExt</span> <span class="hljs-variable">messageExt</span> <span class="hljs-operator">=</span> msgList.get(<span class="hljs-number">0</span>);<br>        LOGGER.info(<span class="hljs-string">&quot;MQ接收到的消息为：&quot;</span> + messageExt.toString());<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> messageExt.getTopic();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tags</span> <span class="hljs-operator">=</span> messageExt.getTags();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(messageExt.getBody(), <span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>            LOGGER.info(<span class="hljs-string">&quot;MQ消息topic=&#123;&#125;, tags=&#123;&#125;, 消息内容=&#123;&#125;&quot;</span>, topic, tags, body);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            LOGGER.error(<span class="hljs-string">&quot;获取MQ消息内容异常&#123;&#125;&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-comment">// TODO 处理业务逻辑</span><br>        <span class="hljs-keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>启动测试</strong></em></p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081427813.png" alt="截屏2021-10-31 00.47.01"></p><p>如图,收到生产者消息</p>]]></content>
    
    
    <categories>
      
      <category>RocketMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ安装及快速入门</title>
    <link href="/2021/07/01/2021-07-01-RocketMQ%20%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/07/01/2021-07-01-RocketMQ%20%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p><strong>安装条件</strong></p><blockquote><p>64位操作系统，建议使用 Linux &#x2F; Unix &#x2F; Mac</p><p>64位JDK 1.8+</p><p>Maven 3.2.x</p></blockquote><p><strong>下载和构建</strong></p><p>从<a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.9.2/rocketmq-all-4.9.2-source-release.zip">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.9.2/rocketmq-all-4.9.2-source-release.zip</a>下载源码版本，执行以下命令来解压源码并构建二进制文件。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">unzip rocketmq-all-<span class="hljs-number">4.9</span><span class="hljs-number">.2</span>-source-release.<span class="hljs-property">zip</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">cd rocketmq-all-<span class="hljs-number">4.9</span><span class="hljs-number">.2</span>/</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">mvn -<span class="hljs-title class_">Prelease</span>-all -<span class="hljs-title class_">DskipTests</span> clean install -U</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">cd distribution/target/rocketmq-<span class="hljs-number">4.9</span><span class="hljs-number">.2</span>/rocketmq-<span class="hljs-number">4.9</span><span class="hljs-number">.2</span></span><br></code></pre></td></tr></table></figure><h4 id="1-启动mqnamesrv"><a href="#1-启动mqnamesrv" class="headerlink" title="1. 启动mqnamesrv"></a>1. 启动mqnamesrv</h4><h5 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv &amp;<br></code></pre></td></tr></table></figure><p>或者加上输出日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> sh bin/mqnamesrv  &gt;  ~/logs/rocketmq/logs/namesrv.log &amp;<br></code></pre></td></tr></table></figure><h5 id="停止命令"><a href="#停止命令" class="headerlink" title="停止命令"></a>停止命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> sh bin/mqshutdown namesrv<br></code></pre></td></tr></table></figure><h4 id="2-启动broker"><a href="#2-启动broker" class="headerlink" title="2. 启动broker"></a>2. 启动broker</h4><p><strong>修改broker.conf文件</strong></p><p>新增一行,填写安装的rocketmq机器的ip地址</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">brokerIP1</span><span class="hljs-operator">=</span>XX.XXX.XXX.XXX<br></code></pre></td></tr></table></figure><p>注意，下面的ip地址以及端口请填写你安装的rocketmq机器的ip地址及端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> sh bin/mqbroker -c conf/broker.conf  -n xxx.xx.xx.xx:9876 autoCreateTopicEnable=<span class="hljs-literal">true</span>  &gt;  ~/logs/rocketmqlogs/broker.log &amp;<br></code></pre></td></tr></table></figure><p>autoCreateTopicEnable&#x3D;true 是允许自动创建topic</p><p><strong>停止命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> sh bin/mqshutdown broker<br></code></pre></td></tr></table></figure><h4 id="3-发送消息"><a href="#3-发送消息" class="headerlink" title="3. 发送消息"></a>3. 发送消息</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">export NAMESRV_ADDR=localhost:<span class="hljs-number">9876</span><br><br>sh bin/tools<span class="hljs-selector-class">.sh</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.rocketmq</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.quickstart</span>.Producer<br></code></pre></td></tr></table></figure><h4 id="4-接受消息"><a href="#4-接受消息" class="headerlink" title="4. 接受消息"></a>4. 接受消息</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sh bin/tools<span class="hljs-selector-class">.sh</span> org<span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.rocketmq</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.quickstart</span>.Consumer<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>RocketMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RocketMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Easyexcel动态生成excel</title>
    <link href="/2021/06/02/2021-06-02-%E4%BD%BF%E7%94%A8Easyexcel%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90excel/"/>
    <url>/2021/06/02/2021-06-02-%E4%BD%BF%E7%94%A8Easyexcel%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90excel/</url>
    
    <content type="html"><![CDATA[<h4 id="1-EasyExcel简介"><a href="#1-EasyExcel简介" class="headerlink" title="1. EasyExcel简介"></a>1. EasyExcel简介</h4><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。 github地址: <a href="https://github.com/alibaba/easyexcel">https://github.com/alibaba/easyexcel</a></p><h4 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h4><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>    &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.11</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="设置excel默认样式"><a href="#设置excel默认样式" class="headerlink" title="设置excel默认样式"></a>设置excel默认样式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HorizontalCellStyleStrategy <span class="hljs-title function_">defaultStyles</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//TODO 默认样式</span><br>        <span class="hljs-comment">//表头样式策略</span><br>        <span class="hljs-type">WriteCellStyle</span> <span class="hljs-variable">headWriteCellStyle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteCellStyle</span>();<br>        <span class="hljs-comment">//设置表头居中对齐</span><br>        headWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);<br>        <span class="hljs-comment">//表头前景设置淡蓝色</span><br>        headWriteCellStyle.setFillForegroundColor(IndexedColors.PALE_BLUE.getIndex());<br>        <span class="hljs-type">WriteFont</span> <span class="hljs-variable">headWriteFont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteFont</span>();<br>        headWriteFont.setBold(<span class="hljs-literal">true</span>);<br>        headWriteFont.setFontName(<span class="hljs-string">&quot;宋体&quot;</span>);<br>        headWriteFont.setFontHeightInPoints((<span class="hljs-type">short</span>) <span class="hljs-number">12</span>);<br>        headWriteCellStyle.setWriteFont(headWriteFont);<br><br>        <span class="hljs-comment">//内容样式策略策略</span><br>        <span class="hljs-type">WriteCellStyle</span> <span class="hljs-variable">contentWriteCellStyle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteCellStyle</span>();<br>        <span class="hljs-comment">// 设置背景颜色白色</span><br>        contentWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());<br>        <span class="hljs-comment">// 设置垂直居中为居中对齐</span><br>        contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>        <span class="hljs-comment">// 设置左右对齐为靠左对齐</span><br>        contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.LEFT);<br>        <span class="hljs-comment">// 设置单元格上下左右边框为细边框</span><br>        contentWriteCellStyle.setBorderBottom(BorderStyle.MEDIUM);<br>        contentWriteCellStyle.setBorderLeft(BorderStyle.MEDIUM);<br>        contentWriteCellStyle.setBorderRight(BorderStyle.MEDIUM);<br>        contentWriteCellStyle.setBorderTop(BorderStyle.MEDIUM);<br>        <span class="hljs-comment">//创建字体对象</span><br>        <span class="hljs-type">WriteFont</span> <span class="hljs-variable">contentWriteFont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteFont</span>();<br>        <span class="hljs-comment">//内容字体大小</span><br>        contentWriteFont.setFontName(<span class="hljs-string">&quot;宋体&quot;</span>);<br>        contentWriteFont.setFontHeightInPoints((<span class="hljs-type">short</span>) <span class="hljs-number">14</span>);<br>        contentWriteCellStyle.setWriteFont(contentWriteFont);<br>        <span class="hljs-comment">// 初始化表格样式</span><br>        <span class="hljs-type">HorizontalCellStyleStrategy</span> <span class="hljs-variable">horizontalCellStyleStrategy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HorizontalCellStyleStrategy</span>(headWriteCellStyle, contentWriteCellStyle);<br>        <span class="hljs-keyword">return</span> horizontalCellStyleStrategy;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="自定义单元格样式"><a href="#自定义单元格样式" class="headerlink" title="自定义单元格样式"></a>自定义单元格样式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.easy.excel.demo.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.metadata.CellData;<br><span class="hljs-keyword">import</span> com.alibaba.excel.metadata.Head;<br><span class="hljs-keyword">import</span> com.alibaba.excel.util.StyleUtil;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.handler.CellWriteHandler;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteTableHolder;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.style.WriteCellStyle;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.style.WriteFont;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.*;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 设置单元格格式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 15:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CellColorSheetWriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CellWriteHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * map</span><br><span class="hljs-comment">     * key：第i行</span><br><span class="hljs-comment">     * value：第i行中单元格索引集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer, List&lt;Integer&gt;&gt; map;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 颜色</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Short colorIndex;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参构造</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CellColorSheetWriteHandler</span><span class="hljs-params">(HashMap&lt;Integer, List&lt;Integer&gt;&gt; map, Short colorIndex)</span> &#123;<br>        <span class="hljs-built_in">this</span>.map = map;<br>        <span class="hljs-built_in">this</span>.colorIndex = colorIndex;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参构造</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CellColorSheetWriteHandler</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在创建单元格之前调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeCellCreate</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head, Integer columnIndex, Integer relativeRowIndex, Boolean isHead)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在单元格创建后调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellCreate</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellDataConverted</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData, Cell cell, Head head, Integer integer, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在单元上的所有操作完成后调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellDispose</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;<br><br>        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> writeSheetHolder.getSheet();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 考虑到导出数据量过大的情况，不对每一行的每一个单元格进行样式设置，只设置必要行中的某个单元格的样式</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//当前行的第i列</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> cell.getColumnIndex();<br>        <span class="hljs-comment">//不处理第一行</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> != cell.getRowIndex()) &#123;<br>            List&lt;Integer&gt; integers = map.get(cell.getRowIndex());<br>            <span class="hljs-keyword">if</span> (integers != <span class="hljs-literal">null</span> &amp;&amp; integers.size() &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (integers.contains(i)) &#123;<br>                    <span class="hljs-comment">// 根据单元格获取workbook</span><br>                    <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> cell.getSheet().getWorkbook();<br>                    <span class="hljs-comment">//设置行高</span><br>                    writeSheetHolder.getSheet().getRow(cell.getRowIndex()).setHeight((<span class="hljs-type">short</span>) (<span class="hljs-number">1.4</span> * <span class="hljs-number">256</span>));<br>                    writeSheetHolder.getSheet().setDefaultColumnWidth(<span class="hljs-number">200</span>);<br>                    <span class="hljs-comment">// 单元格策略</span><br>                    <span class="hljs-type">WriteCellStyle</span> <span class="hljs-variable">contentWriteCellStyle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteCellStyle</span>();<br>                    <span class="hljs-comment">// 设置背景颜色白色</span><br>                    contentWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());<br>                    <span class="hljs-comment">// 设置垂直居中为居中对齐</span><br>                    contentWriteCellStyle.setVerticalAlignment(VerticalAlignment.CENTER);<br>                    <span class="hljs-comment">// 设置左右对齐为靠左对齐</span><br>                    contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.LEFT);<br>                    <span class="hljs-comment">// 设置单元格上下左右边框为细边框</span><br>                    contentWriteCellStyle.setBorderBottom(BorderStyle.MEDIUM);<br>                    contentWriteCellStyle.setBorderLeft(BorderStyle.MEDIUM);<br>                    contentWriteCellStyle.setBorderRight(BorderStyle.MEDIUM);<br>                    contentWriteCellStyle.setBorderTop(BorderStyle.MEDIUM);<br><br><br>                    <span class="hljs-comment">// 创建字体实例</span><br>                    <span class="hljs-type">WriteFont</span> <span class="hljs-variable">cellWriteFont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteFont</span>();<br>                    <span class="hljs-comment">// 设置字体大小</span><br>                    cellWriteFont.setFontName(<span class="hljs-string">&quot;宋体&quot;</span>);<br>                    cellWriteFont.setFontHeightInPoints((<span class="hljs-type">short</span>) <span class="hljs-number">14</span>);<br>                    <span class="hljs-comment">//设置字体颜色</span><br>                    cellWriteFont.setColor(colorIndex);<br>                    <span class="hljs-comment">//单元格颜色</span><br>                    contentWriteCellStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());<br>                    contentWriteCellStyle.setWriteFont(cellWriteFont);<br><br>                    <span class="hljs-type">CellStyle</span> <span class="hljs-variable">cellStyle</span> <span class="hljs-operator">=</span> StyleUtil.buildHeadCellStyle(workbook, contentWriteCellStyle);<br>                    <span class="hljs-comment">//设置当前行第i列的样式</span><br>                    cell.getRow().getCell(i).setCellStyle(cellStyle);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="设置导出列的自适应宽度"><a href="#设置导出列的自适应宽度" class="headerlink" title="设置导出列的自适应宽度"></a>设置导出列的自适应宽度</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.james.easy.excel.demo.utils;<br><br><span class="hljs-keyword">import</span> com.alibaba.excel.enums.CellDataTypeEnum;<br><span class="hljs-keyword">import</span> com.alibaba.excel.metadata.CellData;<br><span class="hljs-keyword">import</span> com.alibaba.excel.metadata.Head;<br><span class="hljs-keyword">import</span> com.alibaba.excel.util.CollectionUtils;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.metadata.holder.WriteSheetHolder;<br><span class="hljs-keyword">import</span> com.alibaba.excel.write.style.column.AbstractColumnWidthStyleStrategy;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Cell;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 导出列的自适应宽度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2021/10/16 17:12</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomCellWriteHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractColumnWidthStyleStrategy</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COLUMN_WIDTH</span> <span class="hljs-operator">=</span> <span class="hljs-number">255</span>;<br>    <span class="hljs-keyword">private</span>  Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; CACHE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomCellWriteHandler</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColumnWidth</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, List&lt;CellData&gt; cellDataList, Cell cell, Head head, Integer relativeRowIndex, Boolean isHead)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">needSetWidth</span> <span class="hljs-operator">=</span> isHead || !CollectionUtils.isEmpty(cellDataList);<br>        <span class="hljs-keyword">if</span> (needSetWidth) &#123;<br>            Map&lt;Integer, Integer&gt; maxColumnWidthMap = (Map)CACHE.get(writeSheetHolder.getSheetNo());<br>            <span class="hljs-keyword">if</span> (maxColumnWidthMap == <span class="hljs-literal">null</span>) &#123;<br>                maxColumnWidthMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">16</span>);<br>                CACHE.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);<br>            &#125;<br><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">columnWidth</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.dataLength(cellDataList, cell, isHead);<br>            <span class="hljs-keyword">if</span> (columnWidth &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (columnWidth &gt; <span class="hljs-number">255</span>) &#123;<br>                    columnWidth = <span class="hljs-number">255</span>;<br>                &#125;<br><br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">maxColumnWidth</span> <span class="hljs-operator">=</span> (Integer)((Map)maxColumnWidthMap).get(cell.getColumnIndex());<br>                <span class="hljs-keyword">if</span> (maxColumnWidth == <span class="hljs-literal">null</span> || columnWidth &gt; maxColumnWidth) &#123;<br>                    ((Map)maxColumnWidthMap).put(cell.getColumnIndex(), columnWidth);<br>                    writeSheetHolder.getSheet().setColumnWidth(cell.getColumnIndex(), columnWidth * <span class="hljs-number">256</span>);<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">dataLength</span><span class="hljs-params">(List&lt;CellData&gt; cellDataList, Cell cell, Boolean isHead)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isHead) &#123;<br>            <span class="hljs-keyword">return</span> cell.getStringCellValue().getBytes().length;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">CellData</span> <span class="hljs-variable">cellData</span> <span class="hljs-operator">=</span> (CellData)cellDataList.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-type">CellDataTypeEnum</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> cellData.getType();<br>            <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">switch</span>(type) &#123;<br>                    <span class="hljs-keyword">case</span> STRING:<br>                        <span class="hljs-keyword">return</span> cellData.getStringValue().getBytes().length;<br>                    <span class="hljs-keyword">case</span> BOOLEAN:<br>                        <span class="hljs-keyword">return</span> cellData.getBooleanValue().toString().getBytes().length;<br>                    <span class="hljs-keyword">case</span> NUMBER:<br>                        <span class="hljs-keyword">return</span> cellData.getNumberValue().toString().getBytes().length;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="生成excel"><a href="#生成excel" class="headerlink" title="生成excel"></a>生成excel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成excel</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> excelName excel名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sheetName excel sheet名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bodyList excel 主数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> headList excel 头标题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateExcel</span><span class="hljs-params">(String excelName, String sheetName, List&lt;List&lt;String&gt;&gt; bodyList, List&lt;List&lt;String&gt;&gt; headList)</span> &#123;<br><br>    <span class="hljs-type">HorizontalCellStyleStrategy</span> <span class="hljs-variable">horizontalCellStyleStrategy</span> <span class="hljs-operator">=</span> defaultStyles();<br><br>    <span class="hljs-type">CustomCellWriteHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomCellWriteHandler</span>();<br><br>    <span class="hljs-comment">//指定单元格样式</span><br>    <span class="hljs-comment">//用来记录需要为第`key`行中的第`value.get(i)`列设置样式</span><br>    HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-type">CellColorSheetWriteHandler</span> <span class="hljs-variable">writeHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellColorSheetWriteHandler</span>(map, IndexedColors.RED.getIndex());<br>    EasyExcel.write(excelName + <span class="hljs-string">&quot;.xlsx&quot;</span>).excelType(ExcelTypeEnum.XLSX).sheet().sheetName(sheetName)<br>            .head(headList).automaticMergeHead(<span class="hljs-literal">true</span>)<br>            .registerWriteHandler(horizontalCellStyleStrategy)<br>            .registerWriteHandler(writeHandler)<br>            .registerWriteHandler(handler)<br>            .doWrite(bodyList);<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <br>    <span class="hljs-type">EasyExcelUtil</span> <span class="hljs-variable">util</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EasyExcelUtil</span>();<br>    <span class="hljs-comment">// excel 表数据</span><br>    List&lt;List&lt;String&gt;&gt; bodyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// excel 表头</span><br>    List&lt;List&lt;String&gt;&gt; headList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    String[] headerName = &#123;<span class="hljs-string">&quot;test1&quot;</span>, <span class="hljs-string">&quot;test2&quot;</span>, <span class="hljs-string">&quot;test3&quot;</span>, <span class="hljs-string">&quot;test4&quot;</span>, <span class="hljs-string">&quot;test5&quot;</span>, <span class="hljs-string">&quot;test6&quot;</span>, <span class="hljs-string">&quot;test7&quot;</span>, <span class="hljs-string">&quot;test8&quot;</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; headerName.length; i++) &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(headerName[i]);<br>        headList.add(list);<br>    &#125;<br>    <br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;String&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    List&lt;String&gt; list2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;3&quot;</span>);<br>    list.add(<span class="hljs-string">&quot;4&quot;</span>);<br><br>    list1.add(<span class="hljs-string">&quot;5&quot;</span>);<br>    list1.add(<span class="hljs-string">&quot;6&quot;</span>);<br>    list1.add(<span class="hljs-string">&quot;7&quot;</span>);<br>    list1.add(<span class="hljs-string">&quot;8&quot;</span>);<br><br>    list2.add(<span class="hljs-string">&quot;1&quot;</span>);<br>    list2.add(<span class="hljs-string">&quot;9&quot;</span>);<br>    list2.add(<span class="hljs-string">&quot;30&quot;</span>);<br>    list2.add(<span class="hljs-string">&quot;40&quot;</span>);<br><br>    bodyList.add(list1);<br>    bodyList.add(list);<br>    bodyList.add(list2);<br>    <br>    util.generateExcel(DateUtil.now(), <span class="hljs-string">&quot;sheet&quot;</span>, bodyList, headList);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VScode配置Java以及maven环境</title>
    <link href="/2021/06/01/2021-06-01-VScode%E9%85%8D%E7%BD%AEJava%E4%BB%A5%E5%8F%8Amaven%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/06/01/2021-06-01-VScode%E9%85%8D%E7%BD%AEJava%E4%BB%A5%E5%8F%8Amaven%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h4 id="1-进入vscode的settings-json"><a href="#1-进入vscode的settings-json" class="headerlink" title="1. 进入vscode的settings.json"></a>1. 进入vscode的settings.json</h4><ul><li>文件 &gt; 首选项 &gt; 设置 &gt; 在 setting.json中编辑<br><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081421015.png" alt="image-20211029151307091.png"></li></ul><h4 id="2-配置jdk"><a href="#2-配置jdk" class="headerlink" title="2. 配置jdk"></a>2. 配置jdk</h4><p>在 setting.json中添加以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;java.home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;concourse.ls.java.home&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081421331.png" alt="image-20211029152723784-16354924461152.png"></p><h5 id="2-1-配置多个jdk版本"><a href="#2-1-配置多个jdk版本" class="headerlink" title="2.1 配置多个jdk版本"></a>2.1 配置多个jdk版本</h5><p>同时添加下列内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;java.configuration.runtimes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>   <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-1.8&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;sources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/src.zip&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;default&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-11&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;sources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home/lib/src.zip&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaSE-17&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;sources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home/lib/src.zip&quot;</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>运行时名称必须是以下之一：“ J2SE-1.5”，“ JavaSE-1.6”，“ JavaSE-1.7”，“ JavaSE-1.8”，“ JavaSE-9”，“ JavaSE-10”，“ JavaSE-11”，“ JavaSE-12”，“ JavaSE-13”，“ JavaSE-14”。 我们将使用每个受支持的JDK版本来更新列表。</p><h4 id="3-配置maven路径和settings-xml"><a href="#3-配置maven路径和settings-xml" class="headerlink" title="3. 配置maven路径和settings.xml"></a>3. 配置maven路径和settings.xml</h4><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-comment">// 配置maven路径</span><br><span class="hljs-string">&quot;maven.executable.path&quot;</span>: <span class="hljs-string">&quot;D:\software\worksoftware<span class="hljs-char escape_">\a</span>pache-maven-3.6.3<span class="hljs-char escape_">\b</span>in\mvn.cmd&quot;</span>,<br><br><span class="hljs-comment">// 配置maven的settings.xml</span><br><span class="hljs-string">&quot;maven.settingsFile&quot;</span>: <span class="hljs-string">&quot;D:/JetBrains/apache-maven-3.8.1/conf/settings.xml&quot;</span>,<br><span class="hljs-string">&quot;java.configuration.maven.userSettings&quot;</span>: <span class="hljs-string">&quot;D:/JetBrains/apache-maven-3.8.1/conf/settings.xml&quot;</span>,<br><span class="hljs-string">&quot;maven.terminal.customEnv&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;environmentVariable&quot;</span>: <span class="hljs-string">&quot;JAVA_HOME&quot;</span>,<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home&quot;</span><br>    &#125;<br>  ],<br></code></pre></td></tr></table></figure><p>至此 Vscode配置java、maven完成。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>VScode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>VScode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中常用的获取从当前月开始的前第i个月、取结束时间与开始时间相差多少个月份等的方法</title>
    <link href="/2021/05/01/2021-05-01-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E8%8E%B7%E5%8F%96%E4%BB%8E%E5%BD%93%E5%89%8D%E6%9C%88%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AC%ACi%E4%B8%AA%E6%9C%88%E3%80%81%E5%8F%96%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%E4%B8%8E%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%E7%9B%B8%E5%B7%AE%E5%A4%9A%E5%B0%91%E4%B8%AA%E6%9C%88%E4%BB%BD%E7%AD%89%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2021/05/01/2021-05-01-Java%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E8%8E%B7%E5%8F%96%E4%BB%8E%E5%BD%93%E5%89%8D%E6%9C%88%E5%BC%80%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AC%ACi%E4%B8%AA%E6%9C%88%E3%80%81%E5%8F%96%E7%BB%93%E6%9D%9F%E6%97%B6%E9%97%B4%E4%B8%8E%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%E7%9B%B8%E5%B7%AE%E5%A4%9A%E5%B0%91%E4%B8%AA%E6%9C%88%E4%BB%BD%E7%AD%89%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Java中常用的获取从当前月开始的前第i个月、取结束时间与开始时间相差多少个月份等的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DateTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DateFormat</span> <span class="hljs-variable">dfs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">date1</span> <span class="hljs-operator">=</span> dfs.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(Long.valueOf(<span class="hljs-string">&quot;1546327530000&quot;</span>)));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">date2</span> <span class="hljs-operator">=</span> dfs.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(Long.valueOf(<span class="hljs-string">&quot;1559373930000&quot;</span>)));<br>      <span class="hljs-comment">//  getLastMonths(1);</span><br>      <span class="hljs-comment">//  getDifference(date1,date2);</span><br>      <span class="hljs-comment">//  getMouths(new Date(),1);</span><br> <br>        getEveryDay(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(),<span class="hljs-number">7L</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取从当前月开始的前第i个月</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastMonths</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM&quot;</span>);<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        c.setTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        c.add(Calendar.MONTH, -i);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getTime();<br>        System.out.println(sdf.format(m));<br>        <span class="hljs-keyword">return</span> sdf.format(m);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取结束时间与开始时间相差多少个月份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDifference</span><span class="hljs-params">(String start, String end)</span> &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> start.substring(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> end.substring(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">bef</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">aft</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        <span class="hljs-keyword">try</span> &#123;<br>            bef.setTime(sdf.parse(str1));<br>            aft.setTime(sdf.parse(str2));<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> aft.get(Calendar.MONTH) - bef.get(Calendar.MONTH);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> (aft.get(Calendar.YEAR) - bef.get(Calendar.YEAR)) * <span class="hljs-number">12</span>;<br>        System.out.println(Math.abs(month + result));<br>        <span class="hljs-keyword">return</span> Math.abs(month + result);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取某个月份在i个月之前的月份</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMouths</span><span class="hljs-params">(Date date,<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM&quot;</span>);<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        c.setTime(date);<br>        c.add(Calendar.MONTH, Integer.valueOf(<span class="hljs-string">&quot;-&quot;</span>+i));<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getTime();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mon</span> <span class="hljs-operator">=</span> format.format(m);<br>        System.out.println(<span class="hljs-string">&quot;过去一个月：&quot;</span>+mon);<br>        <span class="hljs-keyword">return</span> mon;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算两个时间点相差多少天、多少小时、多少分钟</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ParseException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getDay</span><span class="hljs-params">(Date date1,Date date2)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nd</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<span class="hljs-comment">//每天毫秒数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">nh</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>;<span class="hljs-comment">//每小时毫秒数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">nm</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>;<span class="hljs-comment">//每分钟毫秒数</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> date2.getTime() - date1.getTime(); <span class="hljs-comment">// 获得两个时间的毫秒时间差异</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> diff / nd;   <span class="hljs-comment">// 计算差多少天</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> diff % nd / nh; <span class="hljs-comment">// 计算差多少小时</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> diff % nd % nh / nm;  <span class="hljs-comment">// 计算差多少分钟</span><br>        <span class="hljs-keyword">return</span>  day;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  计算某个时间点在i天之前的时间点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> date</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEveryDay</span><span class="hljs-params">(Date date,Long i)</span>&#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>);<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        c.setTime(date);<br>        c.add(Calendar.DATE, Integer.valueOf(<span class="hljs-string">&quot;-&quot;</span>+i));<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> c.getTime();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> format.format(d);<br>        System.out.println(<span class="hljs-string">&quot;过去七天：&quot;</span>+day);<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysqldump 导出提示Couldn‘t execute SELECT COLUMN_NAME...</title>
    <link href="/2021/04/01/2021-04-01-mysqldump%20%E5%AF%BC%E5%87%BA%E6%8F%90%E7%A4%BACouldn%E2%80%98t%20execute%20SELECT%20COLUMN_NAME.../"/>
    <url>/2021/04/01/2021-04-01-mysqldump%20%E5%AF%BC%E5%87%BA%E6%8F%90%E7%A4%BACouldn%E2%80%98t%20execute%20SELECT%20COLUMN_NAME.../</url>
    
    <content type="html"><![CDATA[<p><strong>mysqldump命令:</strong></p><p>　　导出数据库：mysqldump -h ip -u root -p dbname &gt; db.sql;</p><p>　　导出数据库中的某个表：mysqldump -h ip -u root -p dbname tablename &gt; tablename.sql;</p><p><strong>错误提示:</strong></p><p>　　mysqldump: Couldn’t execute ‘SELECT COLUMN_NAME, JSON_EXTRACT(HISTOGRAM, ‘$.”number-of-buckets-specified”‘) FROM information_schema.COLUMN_STATISTICS</p><p><strong>原因:</strong></p><p>　　因为新版的mysqldump默认启用了一个新标志，通过<code>--column-statistics=0</code>来禁用他</p><p><strong>解决方法:</strong></p><p>　　mysqldump –column-statistics&#x3D;0 -h ip -u root -p dbname &gt; db.sql;</p>]]></content>
    
    
    <categories>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Docker搭建MySql主从复制</title>
    <link href="/2021/03/01/2021-03-01-%E5%9F%BA%E4%BA%8EDocker%20%E6%90%AD%E5%BB%BAMySql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/03/01/2021-03-01-%E5%9F%BA%E4%BA%8EDocker%20%E6%90%AD%E5%BB%BAMySql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>拉取MySql镜像</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull mysql</span><br></code></pre></td></tr></table></figure><blockquote><p>使用此镜像启动容器，这里需要分别启动主从两个容器</p></blockquote><p><strong>Master:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 3306:3306 --name mysqlMaster -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d mysql<br></code></pre></td></tr></table></figure><p><strong>Slave:</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 3307:3306 --name mysqlSlave -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d mysql<br></code></pre></td></tr></table></figure><p>使用<code>docker ps</code>命令查看正在运行的容器：</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081409607.png" alt="WX20220215-174513@2x"></p><blockquote><p>配置Master(主)</p></blockquote><p>通过<code>docker exec -it 5ef0f7741f8f /bin/bash</code>命令进入到Master容器内部，也可以通过<code>docker exec -it mysql8 /bin/bash</code>命令进入。5ef0f7741f8f是容器的id,而mysql8是容器的名称。</p><ul><li><code>cd /etc/mysql</code>切换到&#x2F;etc&#x2F;mysql目录下，然后<code>vi my.cnf</code>对my.cnf进行编辑。此时会报出<code>bash: vi: command not found</code>，需要我们在docker容器内部自行安装vim。使用<code>apt-get install vim</code>命令安装vim</li><li>执行<code>apt-get update</code>，然后再次执行<code>apt-get install vim</code>即可成功安装vim。然后我们就可以使用vim编辑my.cnf，在my.cnf中添加配置如下：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">## 同一局域网内注意要唯一</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">100</span>  <br><span class="hljs-comment">## 开启二进制日志功能，可以随便取（关键）</span><br><span class="hljs-attr">log-bin</span>=mysql-bin<br></code></pre></td></tr></table></figure><p>配置完成之后，需要重启mysql服务使配置生效。使用<code>docker restart mysql8</code>完成重启。</p><blockquote><p>配置Slave(从)</p></blockquote><p>和配置Master(主)一样，在Slave配置文件my.cnf中添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-comment">## 设置server_id,注意要唯一</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-number">101</span>  <br><span class="hljs-comment">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span><br><span class="hljs-attr">log-bin</span>=mysql-slave-bin   <br><span class="hljs-comment">## relay_log配置中继日志</span><br><span class="hljs-attr">relay_log</span>=edu-mysql-relay-bin <br></code></pre></td></tr></table></figure><p>配置完成后也需要重启docker容器，操作和配置Master(主)一致。</p><blockquote><p>链接Master(主)和Slave(从)</p></blockquote><p>在Master进入mysql，执行<code>show master status;</code></p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081410270.png" alt="WX20220215-180320@2x"></p><p>File和Position字段的值后面将会用到，在后面的操作完成之前，需要保证Master库不能做任何操作，否则将会引起状态变化，File和Position字段的值变化。</p><p>在Slave 中进入 mysql，执行<code>change master to master_host=&#39;172.17.0.2&#39;, master_user=&#39;root&#39;, master_password=&#39;123456&#39;, master_port=3306, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos= 1183, master_connect_retry=30;</code></p><p><strong>命令说明：</strong></p><ul><li><strong>master_host</strong> ：Master的地址，指的是容器的独立ip,可以通过<code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称|容器id</code>查询容器的ip</li><li><strong>master_port</strong>：Master的端口号，指的是容器的端口号</li><li><strong>master_user</strong>：用于数据同步的用户</li><li><strong>master_password</strong>：用于同步的用户的密码</li><li><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</li><li><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</li><li><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</li></ul><p>在Slave 中的mysql终端执行<code>show slave status;</code>用于查看主从同步状态。正常情况下，SlaveIORunning 和 SlaveSQLRunning 都是No，因为我们还没有开启主从复制过程。使用<code>start slave</code>开启主从复制过程，然后再次查询主从同步状态<code>show slave status;</code>。</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081410542.png" alt="WX20220215-181609@2x"></p><p>SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。此时可以测试数据同步是否成功。</p><blockquote><p>测试主从复制</p></blockquote><p><strong>Master:</strong></p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081410651.png" alt="WX20220215-182042@2x"></p><p><strong>Slave:</strong></p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081410865.png" alt="WX20220215-182042@2x"></p><blockquote><p>问题排查</p></blockquote><ul><li>Could not find first log file name in binary log index file</li></ul><ol><li>首先停止从库同步</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">stop</span> <span class="hljs-literal">slave</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>主库中关闭当前的二进制日志文件并创建一个新文件，新的二进制日志文件的名字在当前的二进制文件的编号上加1.</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flush logs<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>查看主库状态，主要查看日志文件和位置</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">show <span class="hljs-keyword">master</span> <span class="hljs-title">status</span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>回到从库中，执行命令，使日志文件和位置对应主库</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">CHANGE MASTER <span class="hljs-keyword">TO</span> <span class="hljs-attribute">MASTER_LOG_FILE</span>=<span class="hljs-string">&#x27;log-bin.000001&#x27;</span>,MASTER_LOG_POS=116;<br></code></pre></td></tr></table></figure><ol start="5"><li>启动从库</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">start</span> <span class="hljs-literal">slave</span>;<br>show <span class="hljs-literal">slave</span> status; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
      <category>MySql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>这样配置IDEA 注释模板，领导见了都说好</title>
    <link href="/2021/02/04/2021-02-04-%E8%BF%99%E6%A0%B7%E9%85%8D%E7%BD%AEIDEA%20%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%A2%86%E5%AF%BC%E8%A7%81%E4%BA%86%E9%83%BD%E8%AF%B4%E5%A5%BD/"/>
    <url>/2021/02/04/2021-02-04-%E8%BF%99%E6%A0%B7%E9%85%8D%E7%BD%AEIDEA%20%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF%EF%BC%8C%E9%A2%86%E5%AF%BC%E8%A7%81%E4%BA%86%E9%83%BD%E8%AF%B4%E5%A5%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="一、类注释"><a href="#一、类注释" class="headerlink" title="一、类注释"></a>一、类注释</h2><p>打开 IDEA 的 <code>Settings</code>，点击 <code>Editor--&gt;File and Code Templates</code>，点击右边 <code>File</code> 选项卡下面的<code>Class</code>，在其中添加图中红框内的内容：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal">/**<br> * <span class="hljs-variable">@description</span>: TODO <br> * <span class="hljs-variable">@author</span> <span class="hljs-variable">$&#123;</span>USER&#125;<br> * <span class="hljs-variable">@date</span> <span class="hljs-variable">$&#123;</span>DATE&#125; <span class="hljs-variable">$&#123;</span>TIME&#125;<br> * <span class="hljs-variable">@version</span> <span class="hljs-number">1.0</span><br> *<span class="hljs-regexp">/</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081406243.png" alt="截屏2021-11-08 19.05.55"></p><p>保存后，当你创建一个新的类的时候就会自动添加类注释。如果你想对接口也生效，同时配置上图中的<code>Interface</code> 项即可。</p><h2 id="二、方法注释"><a href="#二、方法注释" class="headerlink" title="二、方法注释"></a>二、方法注释</h2><p>相较于类模板，为方法添加注释模板就较为复杂，首先在 <code>Settings</code> 中点击 <code>Editor--&gt;Live Templates</code>。</p><p>点击最右边的 <code>+</code>，首先选择 <code>2. Template Group...</code> 来创建一个模板分组：</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081406260.png" alt="截屏2021-11-08 19.07.08"></p><p>在弹出的对话框中填写分组名，我这里叫做 userDefine：</p><p>然后选中刚刚创建的模板分组 <code>userDefine</code>，然后点击 <code>+</code>，选择 <code>1. Live Template</code>：</p><p>此时就会创建了一个空的模板，我们修改该模板的 <code>Abbreviation</code>、<code>Description</code> 和 <code>Template text</code>。需要注意的是，<code>Abbreviation</code> 必须为 <code>*</code>，最后检查下 <code>Expand with</code> 的值是否为 Enter 键。</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081406736.png" alt="截屏2021-11-08 19.09.24"></p><p>上图中· <code>Template text</code> 内容如下，请直接复制进去，<strong>需要注意首行没有</strong> <strong><code>/</code>，且 <code>*</code> 是顶格的</strong>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less">*<br> * <br> * <span class="hljs-variable">@author</span> James<br> * <span class="hljs-variable">@date</span> $date$ $time$ <br> $param$ <br> * <span class="hljs-variable">@return</span> $return$<br> */<br></code></pre></td></tr></table></figure><p>注意到右下角的 <code>No applicable contexts yet</code> 了吗，这说明此时这个模板还没有指定应用的语言：</p><p>点击 <code>Define</code>，在弹框中勾选<code>Java</code>，表示将该模板应用于所有的 Java 类型文件。</p><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081406155.png" alt="截屏2021-11-08 19.10.59"></p><p>还记得我们配置 <code>Template text</code> 时里面包含了类似于 <code>$date$</code> 这样的参数，此时 IDEA 还不认识这些参数是啥玩意，下面我们对这些参数进行方法映射，让 IDEA 能够明白这些参数的含义。点击 <code>Edit variables</code> 按钮：</p><p>为每一个参数设置相对应的 <code>Expression</code>：<br><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081406058.png" alt="截屏2021-11-08 19.28.59.png"><br>需要注意的是，<code>date</code> 和 <code>time</code> 的 <code>Expression</code> 使用的是 IDEA 内置的函数，直接使用下拉框选择就可以了，而 <code>param</code> 这个参数 IDEA 默认的实现很差，因此我们需要手动实现，代码如下：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;</span>[\\\\[|\\\\]|\\\\s]<span class="hljs-string">&#x27;, &#x27;&#x27;).split(&#x27;</span>,<span class="hljs-string">&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+=&#x27;</span>* @param&#x27;+ <span class="hljs-string">&#x27; &#x27;</span> + params[i]+ <span class="hljs-string">&#x27;:&#x27;</span> + ((i &lt; params.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) ? <span class="hljs-string">&#x27;\\n&#x27;</span> : <span class="hljs-string">&#x27; &#x27;</span>)&#125;; <span class="hljs-keyword">return</span> result<span class="hljs-string">&quot;, methodParameters())</span><br></code></pre></td></tr></table></figure><p>另外 <code>return</code> 这个参数我也自己实现了下，代码如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">groovyScript(<span class="hljs-string">&quot;def result=&#x27;&#x27;; def params=<span class="hljs-subst">\&quot;</span>$&#123;_1&#125;<span class="hljs-subst">\&quot;</span>.replaceAll(&#x27;[<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>[|<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>]|<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>s]&#x27;, &#x27;&#x27;).split(&#x27;&lt;&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;if(i!=0)&#123;result+=&#x27;&lt;&#x27;;&#125;; def p1=params[i].split(&#x27;,&#x27;).toList(); for(i2 = 0; i2 &lt; p1.size(); i2++) &#123; def p2=p1[i2].split(&#x27;<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span>.&#x27;).toList(); result+=p2[p2.size()-1]; if(i2!=p1.size()-1)&#123;result+=&#x27;,&#x27;&#125; &#125; ; &#125;; return result&quot;</span>, methodReturnType())<br></code></pre></td></tr></table></figure><blockquote><p>注：你还注意到我并没有勾选了 <code>Skip if defined</code> 属性，它的意思是如果在生成注释时候如果这一项被定义了，那么鼠标光标就会直接跳过它。我并不需要这个功能，因此有被勾选该属性。</p></blockquote><p>点击 OK 保存设置，大功告成！</p>]]></content>
    
    
    <categories>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap 为什么是线程不安全的？</title>
    <link href="/2021/01/06/2021-01-06-HashMap%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/"/>
    <url>/2021/01/06/2021-01-06-HashMap%20%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>经常会看到说HashMap是线程不安全的，ConcurrentHashMap是线程安全的等等说法，不禁有个疑问，HashMap 为什么是线程不安全的呢？</p><p>下面为jdk1.8源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                  <span class="hljs-type">boolean</span> evict)</span> &#123;<br>       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>       <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>           n = (tab = resize()).length;<br>       <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>           tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>       <span class="hljs-keyword">else</span> &#123;<br>           Node&lt;K,V&gt; e; K k;<br>           <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>               ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>               e = p;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>           <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                   <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                       p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                       <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                           treeifyBin(tab, hash);<br>                       <span class="hljs-keyword">break</span>;<br>                   &#125;<br>                   <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                       ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                       <span class="hljs-keyword">break</span>;<br>                   p = e;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>               <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>               <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                   e.value = value;<br>               afterNodeAccess(e);<br>               <span class="hljs-keyword">return</span> oldValue;<br>           &#125;<br>       &#125;<br>       ++modCount;<br>       <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>           resize();<br>       afterNodeInsertion(evict);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>在 HashMap 的 put() 方法中，可以看出里面进行了很多操作，那么在这里，我们把目光聚焦到标记出来的 modCount++ 这一行代码中，相信有经验的小伙伴一定发现了，这相当于是典型的“i++”操作，正是我们在 06 课时讲过的线程不安全的“运行结果错误”的情况。从表面上看 i++ 只是一行代码，但实际上它并不是一个原子操作，它的执行步骤主要分为三步，而且在每步操作之间都有可能被打断。</p><p>第一个步骤是读取；<br>第二个步骤是增加；<br>第三个步骤是保存。<br>那么我们接下来具体看一下如何发生的线程不安全问题。<br><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081311849.png"></p><p>我们根据箭头指向依次看，假设线程 1 首先拿到 i&#x3D;1 的结果，然后进行 i+1 操作，但此时 i+1 的结果并没有保存下来，线程 1 就被切换走了，于是 CPU 开始执行线程 2，它所做的事情和线程 1 是一样的 i++ 操作，但此时我们想一下，它拿到的 i 是多少？实际上和线程 1 拿到的 i 的结果一样都是 1，为什么呢？因为线程 1 虽然对 i 进行了 +1 操作，但结果没有保存，所以线程 2 看不到修改后的结果。</p><p>然后假设等线程 2 对 i 进行 +1 操作后，又切换到线程 1，让线程 1 完成未完成的操作，即将 i + 1 的结果 2 保存下来，然后又切换到线程 2 完成 i &#x3D; 2 的保存操作，虽然两个线程都执行了对 i 进行 +1 的操作，但结果却最终保存了 i &#x3D; 2 的结果，而不是我们期望的 i &#x3D; 3，这样就发生了线程安全问题，导致了数据结果错误，这也是最典型的线程安全问题。</p><p>所以，从源码的角度，或者说从理论上来讲，这完全足以证明 HashMap 是线程非安全的了。因为如果有多个线程同时调用 put() 方法的话，它很有可能会把 modCount 的值计算错（上述的源码分析针对的是 Java 7 版本的源码，而在 Java 8 版本的 HashMap 的 put 方法中会调用 putVal 方法，里面同样有 ++modCount 语句，所以原理是一样的）。</p><h4 id="实验：扩容期间取出的值不准确"><a href="#实验：扩容期间取出的值不准确" class="headerlink" title="实验：扩容期间取出的值不准确"></a>实验：扩容期间取出的值不准确</h4><p>刚才我们分析了源码，你可能觉得不过瘾，下面我们就打开代码编辑器，用一个实验来证明 HashMap 是线程不安全的。</p><p>为什么说 HashMap 不是线程安全的呢？我们先来讲解下原理。HashMap 本身默认的容量不是很大，如果不停地往 map 中添加新的数据，它便会在合适的时机进行扩容。而在扩容期间，它会新建一个新的空数组，并且用旧的项填充到这个新的数组中去。那么，在这个填充的过程中，如果有线程获取值，很可能会取到 null 值，而不是我们所希望的、原来添加的值。所以我们程序就想演示这种情景，我们来看一下这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMapNotSafe</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br> <br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">targetKey</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b1111_1111_1111_1111</span>; <span class="hljs-comment">// 65 535</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">targetValue</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;v&quot;</span>;<br>        map.put(targetKey, targetValue);<br> <br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            IntStream.range(<span class="hljs-number">0</span>, targetKey).forEach(key -&gt; map.put(key, <span class="hljs-string">&quot;someValue&quot;</span>));<br>        &#125;).start();<br> <br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == map.get(targetKey)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;HashMap is not thread safe.&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中首先建立了一个 HashMap，并且定义了 key 和 value， key 的值是一个二进制的 1111_1111_1111_1111，对应的十进制是 65535。之所以选取这样的值，就是为了让它在扩容往回填充数据的时候，尽量不要填充得太快，以便于我们能捕捉到错误的发生。而对应的 value 是无所谓的，我们随意选取了一个非 null 的 “v” 来表示它，并且把这个值放到了 map 中。</p><p>接下来，我们就用一个新的线程不停地往我们的 map 中去填入新的数据，我们先来看是怎么填入的。首先它用了一个 IntStream，这个 range 是从 0 到之前所讲过的 65535，这个 range 是一个左闭右开的区间，所以会从 0、1、2、3……一直往上加，并且每一次加的时候，这个 0、1、2、3、4 都会作为 key 被放到 map 中去。而它的 value 是统一的，都是 “someValue”，因为 value 不是我们所关心的。</p><p>然后，我们就会把这个线程启动起来，随后就进入一个 while 循环，这个 while 循环是关键，在 while 循环中我们会不停地检测之前放入的 key 所对应的 value 还是不是我们所期望的字符串 “v”。我们在 while 循环中会不停地从 map 中取 key 对应的值。如果 HashMap 是线程安全的，那么无论怎样它所取到的值都应该是我们最开始放入的字符串 “v”，可是如果取出来是一个 null，就会满足这个 if 条件并且随即抛出一个异常，因为如果取出 null 就证明它所取出来的值和我们一开始放入的值是不一致的，也就证明了它是线程不安全的，所以在此我们要抛出一个 RuntimeException 提示我们。</p><p>下面就让我们运行这个程序来看一看是否会抛出这个异常。一旦抛出就代表它是线程不安全的，这段代码的运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.RuntimeException: HashMap is not thread safe.<br>at lesson29.HashMapNotSafe.main(HashMapNotSafe.java:<span class="hljs-number">25</span>)<br><br></code></pre></td></tr></table></figure><p>很明显，很快这个程序就抛出了我们所希望看到的 RuntimeException，并且我们把它描述为：HashMap is not thread safe，一旦它能进入到这个 if 语句，就已经证明它所取出来的值是 null，而不是我们期望的字符串 “v”。</p><p>通过以上这个例子，我们也证明了HashMap 是线程非安全的。</p><p>除了刚才的例子之外，还有很多种线程不安全的情况，例如：</p><p>同时 put 碰撞导致数据丢失<br>比如，有多个线程同时使用 put 来添加元素，而且恰好两个 put 的 key 是一样的，它们发生了碰撞，也就是根据 hash 值计算出来的 bucket 位置一样，并且两个线程又同时判断该位置是空的，可以写入，所以这两个线程的两个不同的 value 便会添加到数组的同一个位置，这样最终就只会保留一个数据，丢失一个数据。</p><p>可见性问题无法保证<br>我们再从可见性的角度去考虑一下。可见性也是线程安全的一部分，如果某一个数据结构声称自己是线程安全的，那么它同样需要保证可见性，也就是说，当一个线程操作这个容器的时候，该操作需要对另外的线程都可见，也就是其他线程都能感知到本次操作。可是 HashMap 对此是做不到的，如果线程 1 给某个 key 放入了一个新值，那么线程 2 在获取对应的 key 的值的时候，它的可见性是无法保证的，也就是说线程 2 可能可以看到这一次的更改，但也有可能看不到。所以从可见性的角度出发，HashMap 同样是线程非安全的。</p><p>死循环造成 CPU 100%<br>下面我们再举一个死循环造成 CPU 100% 的例子。HashMap 有可能会发生死循环并且造成  CPU 100% ，这种情况发生最主要的原因就是在扩容的时候，也就是内部新建新的 HashMap 的时候，扩容的逻辑会反转散列桶中的节点顺序，当有多个线程同时进行扩容的时候，由于 HashMap 并非线程安全的，所以如果两个线程同时反转的话，便可能形成一个循环，并且这种循环是链表的循环，相当于 A 节点指向 B 节点，B 节点又指回到 A 节点，这样一来，在下一次想要获取该 key 所对应的 value 的时候，便会在遍历链表的时候发生永远无法遍历结束的情况，也就发生 CPU 100% 的情况。</p><p>所以综上所述，HashMap 是线程不安全的，在多线程使用场景中如果需要使用 Map，应该尽量避免使用线程不安全的 HashMap。同时，虽然 Collections.synchronizedMap(new HashMap()) 是线程安全的，但是效率低下，因为内部用了很多的 synchronized，多个线程不能同时操作。推荐使用线程安全同时性能比较好的 ConcurrentHashMap。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac没有ll命令解决方案</title>
    <link href="/2021/01/05/2021-01-05-Command%20line%20is%20too%20long%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/01/05/2021-01-05-Command%20line%20is%20too%20long%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>idea启动项目报错:Command line is too long. Shorten command line for className or also defaultconfiguration</p><p>在该项目文件夹.idea&#x2F;workspace.xml中找到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PropertiesComponent&quot;</span>&gt;</span><br><br>  ...<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在其中添加:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dynamic.classpath&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>问题得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写一个消息队列以及延迟消息队列</title>
    <link href="/2021/01/04/2021-01-04-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%A5%E5%8F%8A%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <url>/2021/01/04/2021-01-04-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E4%BB%A5%E5%8F%8A%E5%BB%B6%E8%BF%9F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h4 id="一、什么是消息队列？"><a href="#一、什么是消息队列？" class="headerlink" title="一、什么是消息队列？"></a>一、什么是消息队列？</h4><p>消息队列（Message Queue），是分布式系统中重要的组件，其通用的使用场景可以简单地描述为：<br>当不需要立即获得结果，但是并发量又需要进行控制的时候，差不多就是需要使用消息队列的时候</p><h4 id="二、消息队列有什么用？"><a href="#二、消息队列有什么用？" class="headerlink" title="二、消息队列有什么用？"></a>二、消息队列有什么用？</h4><h5 id="1-提高响应速度"><a href="#1-提高响应速度" class="headerlink" title="1. 提高响应速度"></a>1. 提高响应速度</h5><p>异步处理，串行化的功能变成并行化，从而提升系统性能，缩短响应时间<br>常用于秒杀、发送短信通知等，需要立即返回结果的场景</p><h5 id="2-流量控制"><a href="#2-流量控制" class="headerlink" title="2. 流量控制"></a>2. 流量控制</h5><p>在高并发的情况，为了避免大量的请求冲击后端服务，可以使用消息队列暂存请求，后端服务按照自己的重能力，从队列中消费，例如秒杀、埋点场景。<br>这样可以随时增加服务的实例数量水平扩容，而不用对系统的其他部分做修改</p><h5 id="3-系统解耦"><a href="#3-系统解耦" class="headerlink" title="3.系统解耦"></a>3.系统解耦</h5><p>例如一个下单的信息需要同步多个子系统，每个子系统都需要保存订单的数据的一部分，如果光靠订单服务的团队去维护所有的子系统数据同步，代价太大<br>解决方法是，通过发布订阅模型，订单服务在订单变化时发送一条消息到一个主题中，所有的下游子系统都订单主题，这样可以每个子系统都可以获得一份完整的订单数据<br>即使是增加、减少子系统，也不会对订单服务造成影响</p><h4 id="三、消息队列有什么缺点？"><a href="#三、消息队列有什么缺点？" class="headerlink" title="三、消息队列有什么缺点？"></a>三、消息队列有什么缺点？</h4><ol><li>同步消息改成了异步，增加了系统的调用链，增加了系统的复杂度</li><li>降低了数据一致性，如果要保持一致性，需要高代价的补偿（如分布式事务、对账）</li><li>引入了消息队列带来的延迟问题</li></ol><h4 id="四、如何自定义一个消息队列？"><a href="#四、如何自定义一个消息队列？" class="headerlink" title="四、如何自定义一个消息队列？"></a>四、如何自定义一个消息队列？</h4><p>我们可使用 Queue 来实现消息队列，Queue 大体可分为以下三类：</p><p><strong>双端队列（Deque）</strong>是 Queue 的子类也是 Queue 的补充类，头部和尾部都支持元素插入和获取；<br>阻塞队列指的是在元素操作时（添加或删除），如果没有成功，会阻塞等待执行，比如当添加元素时，如果队列元素已满，队列则会阻塞等待直到有空位时再插入；<br>非阻塞队列，和阻塞队列相反，它会直接返回操作的结果，而非阻塞等待操作，双端队列也属于非阻塞队列。</p><h5 id="自定义消息队列的实现代码如下："><a href="#自定义消息队列的实现代码如下：" class="headerlink" title="自定义消息队列的实现代码如下："></a>自定义消息队列的实现代码如下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义实现消息队列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span> 2020年08月15日 16:34:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomQueue</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义消息队列</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        producer();  <span class="hljs-comment">// 调用生产者</span><br>        consumer();  <span class="hljs-comment">// 调用消费者</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            System.out.println(queue.poll());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">producer</span><span class="hljs-params">()</span>&#123;<br>        queue.add(<span class="hljs-string">&quot;hello,&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;queue&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上程序的执行结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">hello,<br>queue<br>!<br></code></pre></td></tr></table></figure><p>可以看出消息是以先进先出顺序进行消费的。</p><p>实现自定义延迟队列需要实现 Delayed 接口，重写 getDelay() 方法，延迟队列完整实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Delayed;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 延时消息队列</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span> 2020年08月16日 10:27:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDelay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Delayed</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 延迟截止时间(毫秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">delayTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMsg</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDelay</span><span class="hljs-params">(<span class="hljs-type">long</span> delayTime, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.delayTime = <span class="hljs-built_in">this</span>.delayTime + delayTime;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取剩余时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">return</span> unit.convert(delayTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS)) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.concurrent.DelayQueue;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> james</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@createTime</span> 2020年08月16日 10:45:00</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomDelayQueue</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">DelayQueue</span> <span class="hljs-variable">delayQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayQueue</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        producer();  <span class="hljs-comment">// 调用生产者</span><br>        consumer();  <span class="hljs-comment">// 调用消费者</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;开始执行时间：&quot;</span> +<br>                DateFormat.getDateTimeInstance().format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>        <span class="hljs-keyword">while</span> (!delayQueue.isEmpty()) &#123;<br>            System.out.println(delayQueue.take());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;结束执行时间：&quot;</span> +<br>                DateFormat.getDateTimeInstance().format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 添加消息</span><br>        delayQueue.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDelay</span>(<span class="hljs-number">1000</span>, <span class="hljs-string">&quot;hello,&quot;</span>));<br>        delayQueue.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDelay</span>(<span class="hljs-number">60000</span>, <span class="hljs-string">&quot;delayQueue&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样，一个简易版的延迟消息队列就这样完成了！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何忽略/隐藏/关闭macOS Catalina/Mojave的更新通知</title>
    <link href="/2021/01/03/2021-01-03-%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5:%E9%9A%90%E8%97%8F:%E5%85%B3%E9%97%ADmacOS%20Catalina:Mojave%E7%9A%84%E6%9B%B4%E6%96%B0%E9%80%9A%E7%9F%A5/"/>
    <url>/2021/01/03/2021-01-03-%E5%A6%82%E4%BD%95%E5%BF%BD%E7%95%A5:%E9%9A%90%E8%97%8F:%E5%85%B3%E9%97%ADmacOS%20Catalina:Mojave%E7%9A%84%E6%9B%B4%E6%96%B0%E9%80%9A%E7%9F%A5/</url>
    
    <content type="html"><![CDATA[<p>macOS Catalina 10.15最大的差异就是不支持32位软件，如果是工作使用请确认自己的生产软件是否都兼容再升级。</p><p>隐藏&#x2F;关闭更新通知依次打开 启动台-其他-终端，输入以下神秘代码，Enter后输入用户密码即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#隐藏/关闭Catalina更新</span><br><span class="hljs-built_in">sudo</span> softwareupdate --ignore <span class="hljs-string">&quot;macOS Catalina&quot;</span><br><br><span class="hljs-comment">#隐藏/关闭Mojave更新</span><br><span class="hljs-built_in">sudo</span> softwareupdate --ignore <span class="hljs-string">&quot;macOS Mojave&quot;</span><br></code></pre></td></tr></table></figure><p>隐藏&#x2F;关闭小版本更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#10.15.4</span><br><span class="hljs-built_in">sudo</span> softwareupdate --ignore <span class="hljs-string">&quot;macOS Catalina 10.15.4 Update&quot;</span><br><br><span class="hljs-comment">#10.14.5</span><br><span class="hljs-built_in">sudo</span> softwareupdate --ignore <span class="hljs-string">&quot;macOS Mojave 10.14.5 Update&quot;</span><br></code></pre></td></tr></table></figure><p>关闭偏好设置内的系统更新提示小红点</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">defaults write com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.systempreferences</span> AttentionPrefBundleIDs <span class="hljs-number">0</span> &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><p>将来要是又想在线更新了，再次输入以下神秘代码即可。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo softwareupdate <span class="hljs-comment">--reset-ignored</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mac</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 2.0+版本 docker部署启动出现9848端口错误</title>
    <link href="/2021/01/02/2021-01-02-Nacos%202.0+%E7%89%88%E6%9C%AC%20docker%E9%83%A8%E7%BD%B2%E5%90%AF%E5%8A%A8%E5%87%BA%E7%8E%B09848%E7%AB%AF%E5%8F%A3%E9%94%99%E8%AF%AF/"/>
    <url>/2021/01/02/2021-01-02-Nacos%202.0+%E7%89%88%E6%9C%AC%20docker%E9%83%A8%E7%BD%B2%E5%90%AF%E5%8A%A8%E5%87%BA%E7%8E%B09848%E7%AB%AF%E5%8F%A3%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="1-Docker-Hub文档"><a href="#1-Docker-Hub文档" class="headerlink" title="1.Docker Hub文档"></a>1.<del><a href="https://hub.docker.com/r/nacos/nacos-server">Docker Hub</a>文档</del></h4><p>通过访问Docker Hub官方文档，我们发现docker启动nacos的命令依旧为以下内容</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name nacos-quick -e MODE=standalone -p <span class="hljs-number">8849</span>:<span class="hljs-number">8848</span> -d nacos/nacos-server:<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>测试以后我们发现，通过这个命令虽然启动成功，但是我们的程序会报错com.alibaba.nacos.shaded.io.grpc.StatusRuntimeException: UNAVAILABLE: io exception以及Connection refused: no further information</p><h4 id="2-报错原因"><a href="#2-报错原因" class="headerlink" title="2. 报错原因"></a>2. 报错原因</h4><ul><li>当nacos客户端升级为2.x版本后，新增了gRPC的通信方式，新增了两个端口。这两个端口在nacos原先的端口上(默认8848)，进行一定偏移量自动生成。</li></ul><table><thead><tr><th>端口</th><th>与主端口的偏移量</th><th>描述</th></tr></thead><tbody><tr><td>9848</td><td>1000</td><td>客户端gRPC请求服务端端口,用于客户端向服务端发起连接和请求</td></tr><tr><td>9849</td><td>1001</td><td>服务端gRPC请求服务端端口，用于服务间同步等</td></tr></tbody></table><h4 id="3-更新后的docker启动命令"><a href="#3-更新后的docker启动命令" class="headerlink" title="3. 更新后的docker启动命令"></a>3. 更新后的docker启动命令</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name nacos-quick -e MODE=standalone -p <span class="hljs-number">8848</span>:<span class="hljs-number">8848</span> -p <span class="hljs-number">9848</span>:<span class="hljs-number">9848</span> -p <span class="hljs-number">9849</span>:<span class="hljs-number">9849</span> -d nacos/nacos-server:<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>再次启动,发现错误消失</p><p><strong>官方文档更新不及时，请大家及时避坑</strong></p><h4 id="附-常用属性配置"><a href="#附-常用属性配置" class="headerlink" title="附: 常用属性配置"></a>附: 常用属性配置</h4><table><thead><tr><th>name</th><th>description</th><th>option</th></tr></thead><tbody><tr><td>MODE</td><td>cluster&#x2F;standalone</td><td>cluster&#x2F;standalone default <strong>cluster</strong></td></tr><tr><td>NACOS_SERVERS</td><td>nacos cluster address</td><td>eg. ip1:port1 ip2:port2 ip3:port3</td></tr><tr><td>PREFER_HOST_MODE</td><td>Whether hostname are supported</td><td>hostname&#x2F;ip default <strong>ip</strong></td></tr><tr><td>NACOS_APPLICATION_PORT</td><td>nacos server port</td><td>default <strong>8848</strong></td></tr><tr><td>NACOS_SERVER_IP</td><td>custom nacos server ip when network was mutil-network</td><td></td></tr><tr><td>SPRING_DATASOURCE_PLATFORM</td><td>standalone support mysql</td><td>mysql &#x2F; empty default empty</td></tr><tr><td>MYSQL_SERVICE_HOST</td><td>mysql host</td><td></td></tr><tr><td>MYSQL_SERVICE_PORT</td><td>mysql database port</td><td>default : <strong>3306</strong></td></tr><tr><td>MYSQL_SERVICE_DB_NAME</td><td>mysql database name</td><td></td></tr><tr><td>MYSQL_SERVICE_USER</td><td>username of database</td><td></td></tr><tr><td>MYSQL_SERVICE_PASSWORD</td><td>password of database</td><td></td></tr><tr><td>MYSQL_DATABASE_NUM</td><td>It indicates the number of database</td><td>default :<strong>1</strong></td></tr><tr><td>MYSQL_SERVICE_DB_PARAM</td><td>Database url parameter</td><td>default : <strong>characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;useSSL&#x3D;false</strong></td></tr><tr><td>JVM_XMS</td><td>-Xms</td><td>default :1g</td></tr><tr><td>JVM_XMX</td><td>-Xmx</td><td>default :1g</td></tr><tr><td>JVM_XMN</td><td>-Xmn</td><td>default :512m</td></tr><tr><td>JVM_MS</td><td>-XX:MetaspaceSize</td><td>default :128m</td></tr><tr><td>JVM_MMS</td><td>-XX:MaxMetaspaceSize</td><td>default :320m</td></tr><tr><td>NACOS_DEBUG</td><td>enable remote debug</td><td>y&#x2F;n default :n</td></tr><tr><td>TOMCAT_ACCESSLOG_ENABLED</td><td>server.tomcat.accesslog.enabled</td><td>default :false</td></tr><tr><td>NACOS_AUTH_SYSTEM_TYPE</td><td>The auth system to use, currently only ‘nacos’ is supported</td><td>default :nacos</td></tr><tr><td>NACOS_AUTH_ENABLE</td><td>If turn on auth system</td><td>default :false</td></tr><tr><td>NACOS_AUTH_TOKEN_EXPIRE_SECONDS</td><td>The token expiration in seconds</td><td>default :18000</td></tr><tr><td>NACOS_AUTH_TOKEN</td><td>The default token</td><td>default :SecretKey012345678901234567890123456789012345678901234567890123456789</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>Turn on&#x2F;off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</td><td>default : false</td></tr><tr><td>MEMBER_LIST</td><td>Set the cluster list with a configuration file or command-line argument</td><td>eg:192.168.16.101:8847?raft_port&#x3D;8807,192.168.16.101?raft_port&#x3D;8808,192.168.16.101:8849?raft_port&#x3D;8809</td></tr><tr><td>EMBEDDED_STORAGE</td><td>Use embedded storage in cluster mode without mysql</td><td><code>embedded</code> default : none</td></tr><tr><td>NACOS_AUTH_CACHE_ENABLE</td><td>nacos.core.auth.caching.enabled</td><td>default : false</td></tr><tr><td>NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE</td><td>nacos.core.auth.enable.userAgentAuthWhite</td><td>default : false</td></tr><tr><td>NACOS_AUTH_IDENTITY_KEY</td><td>nacos.core.auth.server.identity.key</td><td>default : serverIdentity</td></tr><tr><td>NACOS_AUTH_IDENTITY_VALUE</td><td>nacos.core.auth.server.identity.value</td><td>default : security</td></tr><tr><td>NACOS_SECURITY_IGNORE_URLS</td><td>nacos.security.ignore.urls</td><td>default : <code>/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Nacos</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot(2.5.2)应用制作Docker镜像</title>
    <link href="/2021/01/01/2021-01-01-SpringBoot(2.5.2)%E5%BA%94%E7%94%A8%E5%88%B6%E4%BD%9CDocker%E9%95%9C%E5%83%8F/"/>
    <url>/2021/01/01/2021-01-01-SpringBoot(2.5.2)%E5%BA%94%E7%94%A8%E5%88%B6%E4%BD%9CDocker%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="1-创建SpringBoot项目"><a href="#1-创建SpringBoot项目" class="headerlink" title="1.创建SpringBoot项目"></a>1.创建SpringBoot项目</h4><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081315925.png" alt="在这里插入图片描述"></p><ul><li>版本请选择2.5.2,不同版本对应的方式略有不同 </li><li>选择Spring Web以及Spring Boot Actuator组件<br><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081315904.png" alt="在这里插入图片描述"></li></ul><p>最后点击Finish即可</p><h4 id="2-创建接口"><a href="#2-创建接口" class="headerlink" title="2. 创建接口"></a>2. 创建接口</h4><p>我们会在启动类下写一个Restful接口,以供我们后期测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DockerDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(DockerDemoApplication.class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/demo&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dockerDemo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;docker success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-修改pom-xml文件"><a href="#3-修改pom-xml文件" class="headerlink" title="3. 修改pom.xml文件"></a>3. 修改pom.xml文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--指定打包后的finalName--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>docker-demo<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                   <span class="hljs-comment">&lt;!--Spring Boot 2.3.0以后版本制作Docker镜像需添加此配置--&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">layers</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">layers</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                       <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-编写Dockerfile文件"><a href="#4-编写Dockerfile文件" class="headerlink" title="4.编写Dockerfile文件"></a>4.编写Dockerfile文件</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><br><br><span class="hljs-keyword">ENV</span> SERVER_PORT <span class="hljs-number">8999</span><br><br><span class="hljs-comment">## docker-demo.jar即pom.xml文件中配置的finalName</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash">  target/docker-demo.jar app.jar</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>,<span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><h4 id="5-上传镜像"><a href="#5-上传镜像" class="headerlink" title="5. 上传镜像"></a>5. 上传镜像</h4><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">docker build -t docker-demo .<br></code></pre></td></tr></table></figure><h4 id="6-重命名镜像"><a href="#6-重命名镜像" class="headerlink" title="6. 重命名镜像"></a>6. 重命名镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker tag IMAGEID(镜像<span class="hljs-built_in">id</span>) REPOSITORY:TAG（仓库：标签）<br></code></pre></td></tr></table></figure><h4 id="7-运行"><a href="#7-运行" class="headerlink" title="7. 运行"></a>7. 运行</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd --name docker-demo -p <span class="hljs-number">8999</span>:<span class="hljs-number">8999</span> docker-demo<br></code></pre></td></tr></table></figure><h4 id="8-浏览器访问"><a href="#8-浏览器访问" class="headerlink" title="8. 浏览器访问"></a>8. 浏览器访问</h4><p><img src="https://raw.githubusercontent.com/ChangNingbo/blog_img/main/img202208081315904.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>SpringBoot</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
